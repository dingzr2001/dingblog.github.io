<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>DZRHome</title>
  
  <subtitle>not only coding</subtitle>
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2024-08-07T18:59:27.532Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>dingzr2001</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title></title>
    <link href="http://example.com/2024/08/08/MySQL%E4%B8%80%E4%BA%9B%E5%BA%95%E5%B1%82%E7%9A%84%E4%B8%9C%E8%A5%BF/"/>
    <id>http://example.com/2024/08/08/MySQL%E4%B8%80%E4%BA%9B%E5%BA%95%E5%B1%82%E7%9A%84%E4%B8%9C%E8%A5%BF/</id>
    <published>2024-08-07T16:24:18.832Z</published>
    <updated>2024-08-07T18:59:27.532Z</updated>
    
    <content type="html"><![CDATA[<h1>MySQL一些底层的东西</h1><p>开这个文章的初衷是在研究MySQL的一些底层原理时，感觉网上的博客写得太过抽象，虽然我语文也没那么好，但是相信还是比他们略好一点的。所以这个文章打算用来记录MySQL底层的一些原理。</p><h2 id="MySQL总体架构">MySQL总体架构</h2><p>MySQL官方给出的MySQL架构图是这样的。主要由5个部分组成：缓存区，解析器，预处理器，</p><p><img src="/.com//D:%5Cdingblog%5Csource%5Cimg%5CMySQL%5Cmysql-architecture.png" alt></p><h2 id="Innodb存储引擎">Innodb存储引擎</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;MySQL一些底层的东西&lt;/h1&gt;
&lt;p&gt;开这个文章的初衷是在研究MySQL的一些底层原理时，感觉网上的博客写得太过抽象，虽然我语文也没那么好，但是相信还是比他们略好一点的。所以这个文章打算用来记录MySQL底层的一些原理。&lt;/p&gt;
&lt;h2 id=&quot;MySQL总体架构&quot;&gt;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>&lt;数据结构/算法&gt; leetcode hot100系列. 105. 从前序与中序遍历序列构造二叉树</title>
    <link href="http://example.com/2024/07/29/lc_105_%E4%BB%8E%E5%89%8D%E5%BA%8F%E4%B8%8E%E4%B8%AD%E5%BA%8F%E9%81%8D%E5%8E%86%E5%BA%8F%E5%88%97%E6%9E%84%E9%80%A0%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
    <id>http://example.com/2024/07/29/lc_105_%E4%BB%8E%E5%89%8D%E5%BA%8F%E4%B8%8E%E4%B8%AD%E5%BA%8F%E9%81%8D%E5%8E%86%E5%BA%8F%E5%88%97%E6%9E%84%E9%80%A0%E4%BA%8C%E5%8F%89%E6%A0%91/</id>
    <published>2024-07-28T17:50:00.000Z</published>
    <updated>2024-08-03T18:35:05.556Z</updated>
    
    <content type="html"><![CDATA[<h1>[LeetCode hot 100] 105. 从前序与中序遍历序列构造二叉树</h1><p><a href="https://leetcode.cn/problems/construct-binary-tree-from-preorder-and-inorder-traversal/description/?envType=study-plan-v2&amp;envId=top-100-liked">题目链接</a></p><p>这个题的关键是理解前序遍历的序列是：【根节点，【左子树】，【右子树】】，而中序遍历的序列是【【左子树】，根节点，【右子树】】。当我们拿到一个前序遍历的序列，唯一能确定的就是第一个数一定是根节点。拿到根节点后，由于没有重复值，所以可以确定中序遍历序列中根节点的位置，从而得到中序遍历的左子树区间和右子树区间，并且得到这两个区间的长度，这样前序遍历的左子树区间和右子树区间也可以确定了。进而，左孩子节点和右孩子节点就可以确定了。</p><p>如果我们只看前序和中序的左子树的区间，就可以再得到左子树的左右孩子，以此类推，所以这是一个递归的过程，递归的参数只需要加上两个序列的起止点，来圈定当前子树的区间。</p><p>特别地，可以使用哈希表来存放每个值在中序遍历序列中的位置，这样就不用每次都用O(n)或O(logn)的时间查一遍了。</p><p>完整代码如下</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Definition for a binary tree node.</span><br><span class="hljs-comment"> * struct TreeNode &#123;</span><br><span class="hljs-comment"> *     int val;</span><br><span class="hljs-comment"> *     TreeNode *left;</span><br><span class="hljs-comment"> *     TreeNode *right;</span><br><span class="hljs-comment"> *     TreeNode() : val(0), left(nullptr), right(nullptr) &#123;&#125;</span><br><span class="hljs-comment"> *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) &#123;&#125;</span><br><span class="hljs-comment"> *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) &#123;&#125;</span><br><span class="hljs-comment"> * &#125;;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    unordered_map&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt; inorderMap;<br>    <span class="hljs-function">TreeNode* <span class="hljs-title">recur</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; preorder, vector&lt;<span class="hljs-type">int</span>&gt;&amp; inorder, <span class="hljs-type">int</span> preStart, <span class="hljs-type">int</span> preEnd, <span class="hljs-type">int</span> inStart, <span class="hljs-type">int</span> inEnd)</span></span>&#123;<br>        <span class="hljs-keyword">if</span>(preEnd &lt; preStart) <span class="hljs-keyword">return</span> <span class="hljs-literal">nullptr</span>;<br>        <span class="hljs-type">int</span> rootVal = preorder[preStart];<br>        <br>        <span class="hljs-type">int</span> inRootPos = inorderMap[rootVal];<br>        <span class="hljs-type">int</span> leftSize = inRootPos - inStart;<br>        TreeNode* left = <span class="hljs-built_in">recur</span>(preorder, inorder, preStart + <span class="hljs-number">1</span>, preStart + leftSize, inStart, inRootPos - <span class="hljs-number">1</span>);<br>        TreeNode* right = <span class="hljs-built_in">recur</span>(preorder, inorder, preStart + leftSize + <span class="hljs-number">1</span>, preEnd, inRootPos + <span class="hljs-number">1</span>, inEnd);<br>        TreeNode* root = <span class="hljs-keyword">new</span> <span class="hljs-built_in">TreeNode</span>(rootVal, left, right);<br>        <span class="hljs-keyword">return</span> root;<br>    &#125;<br>    <span class="hljs-function">TreeNode* <span class="hljs-title">buildTree</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; preorder, vector&lt;<span class="hljs-type">int</span>&gt;&amp; inorder)</span> </span>&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; inorder.<span class="hljs-built_in">size</span>(); i++)&#123;<br>            inorderMap[inorder[i]] = i;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">recur</span>(preorder, inorder, <span class="hljs-number">0</span>, inorder.<span class="hljs-built_in">size</span>() - <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, inorder.<span class="hljs-built_in">size</span>() - <span class="hljs-number">1</span>);<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;[LeetCode hot 100] 105. 从前序与中序遍历序列构造二叉树&lt;/h1&gt;
&lt;p&gt;&lt;a href=&quot;https://leetcode.cn/problems/construct-binary-tree-from-preorder-and-inorder-tr</summary>
      
    
    
    
    <category term="Algorithm" scheme="http://example.com/categories/Algorithm/"/>
    
    <category term="C++" scheme="http://example.com/categories/Algorithm/C/"/>
    
    <category term="job" scheme="http://example.com/categories/Algorithm/C/job/"/>
    
    
  </entry>
  
  <entry>
    <title>&lt;数据结构/算法&gt; leetcode hot100系列. 114. 二叉树展开为链表</title>
    <link href="http://example.com/2024/07/29/lc_114_%E4%BA%8C%E5%8F%89%E6%A0%91%E5%B1%95%E5%BC%80%E4%B8%BA%E9%93%BE%E8%A1%A8/"/>
    <id>http://example.com/2024/07/29/lc_114_%E4%BA%8C%E5%8F%89%E6%A0%91%E5%B1%95%E5%BC%80%E4%B8%BA%E9%93%BE%E8%A1%A8/</id>
    <published>2024-07-28T17:50:00.000Z</published>
    <updated>2024-08-03T13:27:52.683Z</updated>
    
    <content type="html"><![CDATA[<h1>[LeetCode hot 100] 128. 将有序数组转化为二叉搜索树</h1><p><a href="https://leetcode.cn/problems/convert-sorted-array-to-binary-search-tree/description/?envType=study-plan-v2&amp;envId=top-100-liked">题目链接</a></p><p>这个题有点意思，乍一看挺简单，想一下就会发现有点点坑。</p><p>展开的结果是先序遍历的顺序，也就是说对于某个节点，展开后它的右子树这一串应该是根节点→左子树→右子树这个顺序，而左子树和右子树也是这样展开的。</p><p>所以对一个节点，我们首先要将左子树链到右子树中，再对左右子树都执行这个操作。这个过程的实现方法叫做Morris遍历，方法是找到左子树的最右节点，再将右子树接到该节点的下面。这玩意的正确性我不会证明，但是可以画一条<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>y</mi><mo>=</mo><mo>−</mo><mi>x</mi></mrow><annotation encoding="application/x-tex">y=-x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6667em;vertical-align:-0.0833em;"></span><span class="mord">−</span><span class="mord mathnormal">x</span></span></span></span>的斜线，这个过程就相当于沿着这个方向一层一层剥开。知乎上找到一个挺好的示意图</p><p><img src="/.com//D:%5Cdingblog%5Csource%5Cimg%5Cleetcode%5C144_morris.jpg" alt></p><p>每次把左子树连到右子树之后，需要再对左子树内也进行同样的操作，但是此时左子树就是我们根节点的右孩子，因此把指针移动到右孩子，重复这个循环。此外，右子树也需要执行这个操作，同样不用担心，指针一直往右移动，早晚会指向原本的右子树的根节点，也就是原来的右孩子。代码实现如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Definition for a binary tree node.</span><br><span class="hljs-comment"> * struct TreeNode &#123;</span><br><span class="hljs-comment"> *     int val;</span><br><span class="hljs-comment"> *     TreeNode *left;</span><br><span class="hljs-comment"> *     TreeNode *right;</span><br><span class="hljs-comment"> *     TreeNode() : val(0), left(nullptr), right(nullptr) &#123;&#125;</span><br><span class="hljs-comment"> *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) &#123;&#125;</span><br><span class="hljs-comment"> *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) &#123;&#125;</span><br><span class="hljs-comment"> * &#125;;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">flatten</span><span class="hljs-params">(TreeNode* root)</span> </span>&#123;<br>        TreeNode* cur = root;<br>        <span class="hljs-keyword">while</span>(cur)&#123;<br>            TreeNode* leftRight = cur-&gt;left;<br>            <span class="hljs-keyword">if</span>(leftRight)&#123;<br>                <span class="hljs-keyword">while</span>(leftRight-&gt;right)&#123;<br>                    leftRight = leftRight-&gt;right;<br>                &#125;<br>                leftRight-&gt;right = cur-&gt;right;<br>                cur-&gt;right = cur-&gt;left;<br>                cur-&gt;left = <span class="hljs-literal">nullptr</span>;<br>            &#125;<br>            cur = cur-&gt;right;       <br>        &#125;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;[LeetCode hot 100] 128. 将有序数组转化为二叉搜索树&lt;/h1&gt;
&lt;p&gt;&lt;a href=&quot;https://leetcode.cn/problems/convert-sorted-array-to-binary-search-tree/descripti</summary>
      
    
    
    
    <category term="Algorithm" scheme="http://example.com/categories/Algorithm/"/>
    
    <category term="C++" scheme="http://example.com/categories/Algorithm/C/"/>
    
    <category term="job" scheme="http://example.com/categories/Algorithm/C/job/"/>
    
    
  </entry>
  
  <entry>
    <title>&lt;数据结构/算法&gt; leetcode hot100系列. 128. 将有序数组转化为二叉搜索树</title>
    <link href="http://example.com/2024/07/29/lc_128_%E5%B0%86%E6%9C%89%E5%BA%8F%E6%95%B0%E7%BB%84%E8%BD%AC%E5%8C%96%E4%B8%BA%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
    <id>http://example.com/2024/07/29/lc_128_%E5%B0%86%E6%9C%89%E5%BA%8F%E6%95%B0%E7%BB%84%E8%BD%AC%E5%8C%96%E4%B8%BA%E4%BA%8C%E5%8F%89%E6%A0%91/</id>
    <published>2024-07-28T17:50:00.000Z</published>
    <updated>2024-08-03T06:17:13.387Z</updated>
    
    <content type="html"><![CDATA[<h1>[LeetCode hot 100] 128. 将有序数组转化为二叉搜索树</h1><p><a href="https://leetcode.cn/problems/convert-sorted-array-to-binary-search-tree/description/?envType=study-plan-v2&amp;envId=top-100-liked">题目链接</a></p><p>这个题很自然地想到要用递归，这也是构建二叉搜索树的标准步骤。每次都从当前的区间取中点作为根节点，并且分别在左右半区内寻找左孩子和右孩子（即左右半区的中点），如此递归。唯一需要注意的是我们在每次递归中都在做些什么？答：我们找到当前的节点，并调用递归来构造当前节点的左右孩子节点。只要左右孩子都没有就可以返回了，但是这样判断起来太麻烦，不如直接再往深了走一层，假如当前节点不存在(即left &gt; right)，就说明走到了不存在的孩子那一层，返回null即可，正好方便父节点把对应孩子的指针设为null。</p><p>完整代码如下</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Definition for a binary tree node.</span><br><span class="hljs-comment"> * struct TreeNode &#123;</span><br><span class="hljs-comment"> *     int val;</span><br><span class="hljs-comment"> *     TreeNode *left;</span><br><span class="hljs-comment"> *     TreeNode *right;</span><br><span class="hljs-comment"> *     TreeNode() : val(0), left(nullptr), right(nullptr) &#123;&#125;</span><br><span class="hljs-comment"> *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) &#123;&#125;</span><br><span class="hljs-comment"> *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) &#123;&#125;</span><br><span class="hljs-comment"> * &#125;;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br><br>    <span class="hljs-function">TreeNode* <span class="hljs-title">recur</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums, <span class="hljs-type">int</span> left, <span class="hljs-type">int</span> right)</span></span>&#123;<br>        <span class="hljs-keyword">if</span>(left &gt; right) <span class="hljs-keyword">return</span> <span class="hljs-literal">nullptr</span>;<br>        <span class="hljs-type">int</span> mid = left + (right - left) / <span class="hljs-number">2</span>;<br>        TreeNode* cur = <span class="hljs-keyword">new</span> <span class="hljs-built_in">TreeNode</span>(nums[mid]);<br>        cur-&gt;left = <span class="hljs-built_in">recur</span>(nums, left, mid - <span class="hljs-number">1</span>);<br>        cur-&gt;right = <span class="hljs-built_in">recur</span>(nums, mid + <span class="hljs-number">1</span>, right);<br>        <span class="hljs-keyword">return</span> cur;<br>    &#125;<br>    <span class="hljs-function">TreeNode* <span class="hljs-title">sortedArrayToBST</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums)</span> </span>&#123;<br>        <span class="hljs-type">int</span> left = <span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span> right = nums.<span class="hljs-built_in">size</span>() - <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">recur</span>(nums, left, right);<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;[LeetCode hot 100] 128. 将有序数组转化为二叉搜索树&lt;/h1&gt;
&lt;p&gt;&lt;a href=&quot;https://leetcode.cn/problems/convert-sorted-array-to-binary-search-tree/descripti</summary>
      
    
    
    
    <category term="Algorithm" scheme="http://example.com/categories/Algorithm/"/>
    
    <category term="C++" scheme="http://example.com/categories/Algorithm/C/"/>
    
    <category term="job" scheme="http://example.com/categories/Algorithm/C/job/"/>
    
    
  </entry>
  
  <entry>
    <title>&lt;数据结构/算法&gt; leetcode hot100系列. 146. LRU缓存</title>
    <link href="http://example.com/2024/07/29/lc_146_LRU%E7%BC%93%E5%AD%98/"/>
    <id>http://example.com/2024/07/29/lc_146_LRU%E7%BC%93%E5%AD%98/</id>
    <published>2024-07-28T17:50:00.000Z</published>
    <updated>2024-08-05T19:41:41.889Z</updated>
    
    <content type="html"><![CDATA[<h1>[LeetCode hot 100] 146. LRU缓存</h1><p><a href="https://leetcode.cn/problems/lru-cache/description/?envType=study-plan-v2&amp;envId=top-100-liked">题目链接</a></p><p>也是高频题目了，为了使查询get达到O(1)，自然是用哈希表来存储，但是又需要在O(1)时间完成删除（即逐出）、调整顺序等操作。这里使用<strong>双向链表</strong>比较合适，主要是因为比较方便删除。传统的单向链表想要删除还需要再遍历一遍获取前驱节点，而双向链表自带前驱节点，可以不用遍历就直接删除。</p><p>将二者结合，则哈希表应该保存&lt;key, 链表节点&gt;这样的键值对，这样可以通过key直接找到对应的节点，方便移位。</p><p>另外为了实现放到头部和删除尾部元素这两个操作，需要建立头结点和尾节点，注意不是头指针和尾指针，而是单独的头节点和尾节点。</p><p>完整代码如下</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">struct</span> <span class="hljs-title class_">BiListNode</span>&#123;<br>    <span class="hljs-type">int</span> key;<br>    <span class="hljs-type">int</span> value;<br>    BiListNode* prev;<br>    BiListNode* next;<br>    <span class="hljs-built_in">BiListNode</span>(<span class="hljs-type">int</span> key, <span class="hljs-type">int</span> value):<span class="hljs-built_in">key</span>(key), <span class="hljs-built_in">value</span>(value)&#123;&#125;<br>&#125;;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">LRUCache</span> &#123;<br><span class="hljs-keyword">private</span>:<br>    BiListNode* head;<br>    BiListNode* tail;<br>    <span class="hljs-type">int</span> capacity;<br>    <span class="hljs-type">int</span> usage;<br>    unordered_map&lt;<span class="hljs-type">int</span>, BiListNode*&gt; keyMap;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">LRUCache</span>(<span class="hljs-type">int</span> capacity) &#123;<br>        <span class="hljs-keyword">this</span>-&gt;head = <span class="hljs-keyword">new</span> <span class="hljs-built_in">BiListNode</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>);<br>        <span class="hljs-keyword">this</span>-&gt;tail = <span class="hljs-keyword">new</span> <span class="hljs-built_in">BiListNode</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>);<br>        head-&gt;next = tail;<br>        tail-&gt;prev = head;<br>        head-&gt;prev = tail-&gt;next = <span class="hljs-literal">nullptr</span>;<br>        <span class="hljs-keyword">this</span>-&gt;capacity = capacity;<br>        <span class="hljs-keyword">this</span>-&gt;usage = <span class="hljs-number">0</span>;<br>    &#125;<br>    <br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">get</span><span class="hljs-params">(<span class="hljs-type">int</span> key)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span>(!keyMap.<span class="hljs-built_in">count</span>(key)) <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>        BiListNode* entry = keyMap[key];<br>        <span class="hljs-comment">//从原本位置拿走</span><br>        entry-&gt;prev-&gt;next = entry-&gt;next;<br>        entry-&gt;next-&gt;prev = entry-&gt;prev;    <br>        head-&gt;next-&gt;prev = entry;<br>        <span class="hljs-comment">//放到头部</span><br>        entry-&gt;next = head-&gt;next;<br>        head-&gt;next = entry;<br>        entry-&gt;prev = head;<br>        <span class="hljs-keyword">return</span> entry-&gt;value;<br>    &#125;<br>    <br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">put</span><span class="hljs-params">(<span class="hljs-type">int</span> key, <span class="hljs-type">int</span> value)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span>(!keyMap.<span class="hljs-built_in">count</span>(key))&#123;<br>            <span class="hljs-keyword">if</span>(usage &gt;= capacity)&#123;<br>                <span class="hljs-comment">//删除尾部元素，注意在哈希表里也要删除</span><br>                BiListNode* tmp = tail-&gt;prev;<br>                keyMap.<span class="hljs-built_in">erase</span>(tmp-&gt;key);<br>                tail-&gt;prev-&gt;prev-&gt;next = tail;<br>                tail-&gt;prev = tmp-&gt;prev;<br>                <span class="hljs-keyword">delete</span> tmp;<br>                usage--;<br><br>            &#125;<br>            <span class="hljs-comment">//在头部插入新元素</span><br>            BiListNode* entry = <span class="hljs-keyword">new</span> <span class="hljs-built_in">BiListNode</span>(key, value);<br>            entry-&gt;next = head-&gt;next;<br>            entry-&gt;prev = head;<br>            entry-&gt;next-&gt;prev = entry;<br>            head-&gt;next = entry;<br>            keyMap.<span class="hljs-built_in">emplace</span>(key, entry);<br>            usage++;<br><br>        &#125; <span class="hljs-keyword">else</span>&#123;<br>            BiListNode* entry = keyMap[key];<br>            entry-&gt;value = value; <span class="hljs-comment">//更新value值</span><br>            <span class="hljs-comment">//放到头部</span><br>            entry-&gt;prev-&gt;next = entry-&gt;next;<br>            entry-&gt;next-&gt;prev = entry-&gt;prev;<br>            entry-&gt;next = head-&gt;next;<br>            head-&gt;next-&gt;prev = entry;<br>            head-&gt;next = entry;<br>            entry-&gt;prev = head;<br>        &#125;<br>    &#125;<br>&#125;;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Your LRUCache object will be instantiated and called as such:</span><br><span class="hljs-comment"> * LRUCache* obj = new LRUCache(capacity);</span><br><span class="hljs-comment"> * int param_1 = obj-&gt;get(key);</span><br><span class="hljs-comment"> * obj-&gt;put(key,value);</span><br><span class="hljs-comment"> */</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;[LeetCode hot 100] 146. LRU缓存&lt;/h1&gt;
&lt;p&gt;&lt;a href=&quot;https://leetcode.cn/problems/lru-cache/description/?envType=study-plan-v2&amp;amp;envId=top-1</summary>
      
    
    
    
    <category term="Algorithm" scheme="http://example.com/categories/Algorithm/"/>
    
    <category term="C++" scheme="http://example.com/categories/Algorithm/C/"/>
    
    <category term="job" scheme="http://example.com/categories/Algorithm/C/job/"/>
    
    
  </entry>
  
  <entry>
    <title>&lt;数据结构/算法&gt; leetcode hot100系列. 239.滑动窗口最大值</title>
    <link href="http://example.com/2024/07/29/lc_239_%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3%E6%9C%80%E5%A4%A7%E5%80%BC/"/>
    <id>http://example.com/2024/07/29/lc_239_%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3%E6%9C%80%E5%A4%A7%E5%80%BC/</id>
    <published>2024-07-28T17:50:00.000Z</published>
    <updated>2024-07-28T13:37:20.293Z</updated>
    
    <content type="html"><![CDATA[<h1>[LeetCode hot 100] 239. 滑动窗口最大值</h1><p><a href="https://leetcode.cn/problems/sliding-window-maximum/description/?envType=study-plan-v2&amp;envId=top-100-liked">题目链接</a></p><p>非常有趣的一道题。我们首先思考一下，每次窗口移动可能会发生什么事。</p><ol><li>假如移出去的那个数不是之前窗口的最大值，那没问题，直接丢掉就可以。</li><li>假如移出去的恰好就是窗口的最大值，那么把它移走了，新王登基，怎样又快又准地去找这个新王是谁呢？</li></ol><p>我们来看第一种情况，如果这个数不是最大值，说明后面一定存在一个数比它更大。当窗口移动时，由于这个数在前面，所以先被卡掉，但是因为后面还有更大的，所以卡掉它对于窗口的最大值不起任何影响。因此这种数对于结果起不到任何的改变，是窗口中的小透明，我们不需要管它们。</p><p>那么剩下的另一种数就是窗口的后面没有比它大的了，这种才是我们需要考虑的，因为它们是真正关乎到滑动窗口最大值的数。</p><p>我们要记录所有的这种数，这样的单调序列再加上滑动窗口这种每次后面进来一个数，前面出来一个数的结构，非常适合使用单调队列来记录。单调队列中，元素从队头到队尾递减，每次后移一位，就对比新的数和队尾，如果队尾比新数小，就说明队尾是小透明，出队扔掉，再比较新的队尾，也就是本来在队尾的前一位，比队尾大一点，如此循环直到队尾不比新数小，也就是踢到了钢板。这时将新数入队。</p><p>同时，移动窗口会导致原来窗口中的第一位被卡掉，这时如果被卡掉的正好是队头，那说明它恰好是最大的那个，就需要从队头把它出队。（由于可能有重复值，因此队列中需要存储下标，通过下标进行比对）</p><p>每个窗口中最大的元素一定就是当前的队头。</p><p>综合以上，完整代码如下</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">maxSlidingWindow</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums, <span class="hljs-type">int</span> k)</span> </span>&#123;<br>        deque&lt;<span class="hljs-type">int</span>&gt; dq;<br>        <span class="hljs-type">int</span> left = <span class="hljs-number">0</span>;<br>        vector&lt;<span class="hljs-type">int</span>&gt; ans;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; nums.<span class="hljs-built_in">size</span>() - k + <span class="hljs-number">1</span>; i++)&#123;<br>            <span class="hljs-keyword">if</span>(i == <span class="hljs-number">0</span>)&#123;<br>                <span class="hljs-comment">//首先建立第一个窗口的优先队列，后续的优先队列都在此基础上调整</span><br>                <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; k; j++)&#123;<br>                    cout&lt;&lt;j&lt;&lt;endl;<br>                    <span class="hljs-keyword">if</span>(dq.<span class="hljs-built_in">empty</span>() || nums[dq.<span class="hljs-built_in">back</span>()] &gt;= nums[j])&#123;<br>                        dq.<span class="hljs-built_in">push_back</span>(j);<br>                    &#125; <span class="hljs-keyword">else</span>&#123;<br>                        <span class="hljs-keyword">while</span>(!dq.<span class="hljs-built_in">empty</span>() &amp;&amp; nums[dq.<span class="hljs-built_in">back</span>()] &lt; nums[j])&#123;<br>                            dq.<span class="hljs-built_in">pop_back</span>();<br>                        &#125;<br>                        dq.<span class="hljs-built_in">push_back</span>(j);<br>                    &#125;<br>                &#125;<br>                ans.<span class="hljs-built_in">push_back</span>(nums[dq.<span class="hljs-built_in">front</span>()]);<br>            &#125; <span class="hljs-keyword">else</span>&#123;<br>                <span class="hljs-keyword">if</span>(!dq.<span class="hljs-built_in">empty</span>() &amp;&amp; dq.<span class="hljs-built_in">front</span>() == i - <span class="hljs-number">1</span>)&#123;<br>                    dq.<span class="hljs-built_in">pop_front</span>();<br>                &#125;<br>                <span class="hljs-keyword">if</span>(dq.<span class="hljs-built_in">empty</span>() || nums[dq.<span class="hljs-built_in">back</span>()] &gt;= nums[i+k<span class="hljs-number">-1</span>])&#123;<br>                    dq.<span class="hljs-built_in">push_back</span>(i+k<span class="hljs-number">-1</span>);<br>                &#125; <span class="hljs-keyword">else</span>&#123;<br>                    <span class="hljs-keyword">while</span>(!dq.<span class="hljs-built_in">empty</span>() &amp;&amp; nums[dq.<span class="hljs-built_in">back</span>()] &lt; nums[i+k<span class="hljs-number">-1</span>])&#123;<br>                        dq.<span class="hljs-built_in">pop_back</span>();<br>                    &#125;<br>                    dq.<span class="hljs-built_in">push_back</span>(i+k<span class="hljs-number">-1</span>);<br>                &#125;<br>                ans.<span class="hljs-built_in">push_back</span>(nums[dq.<span class="hljs-built_in">front</span>()]);<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> ans;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;[LeetCode hot 100] 239. 滑动窗口最大值&lt;/h1&gt;
&lt;p&gt;&lt;a href=&quot;https://leetcode.cn/problems/sliding-window-maximum/description/?envType=study-plan-v2&amp;</summary>
      
    
    
    
    <category term="Algorithm" scheme="http://example.com/categories/Algorithm/"/>
    
    <category term="C++" scheme="http://example.com/categories/Algorithm/C/"/>
    
    <category term="job" scheme="http://example.com/categories/Algorithm/C/job/"/>
    
    
    <category term="algorithm" scheme="http://example.com/tags/algorithm/"/>
    
    <category term="slide-window" scheme="http://example.com/tags/slide-window/"/>
    
  </entry>
  
  <entry>
    <title>&lt;数据结构/算法&gt; leetcode hot100系列. 25. k个一组翻转链表</title>
    <link href="http://example.com/2024/07/29/lc_25_k%E4%B8%AA%E4%B8%80%E7%BB%84%E7%BF%BB%E8%BD%AC%E9%93%BE%E8%A1%A8/"/>
    <id>http://example.com/2024/07/29/lc_25_k%E4%B8%AA%E4%B8%80%E7%BB%84%E7%BF%BB%E8%BD%AC%E9%93%BE%E8%A1%A8/</id>
    <published>2024-07-28T17:50:00.000Z</published>
    <updated>2024-08-04T19:10:45.932Z</updated>
    
    <content type="html"><![CDATA[<h1>[LeetCode hot 100] 25. k个一组翻转链表</h1><p><a href="https://leetcode.cn/problems/construct-binary-tree-from-preorder-and-inorder-traversal/description/?envType=study-plan-v2&amp;envId=top-100-liked">题目链接</a></p><p>好折磨的题，要想明白还真是得费一些脑筋。</p><p>我们已经做过<a href="https://leetcode.cn/problems/reverse-linked-list/description/?envType=study-plan-v2&amp;envId=top-100-liked">LeetCode 206 反转链表</a>，直到反转链表的思路是保留一个前驱节点，然后每次让后继结点的next指向前驱节点。这个题中对于每一组中的反转自然也可以这样做。</p><p>不过难点就在于局部反转后怎样和原链表接起来。思路我大致画了个图（假设k=2）：</p><p><img src="/.com//D:%5Cdingblog%5Csource%5Cimg%5Cleetcode%5Clc_25.png" alt></p><p>这里有个很tricky的点，就是这个prev的设置。由于我们需要确定一组k个节点中的最后一个，所以需要使用快慢指针，快指针比慢指针领先k，并且二者每轮同时后移k个。慢指针是当前k个的前一个，也就是next指向当前k个中第一个的节点，而快指针就是当前k个的最后一个。在反转整个链表时，我们首先令prev=nullptr，这是因为原先的第一个节点会变成最后一个，而最后一个节点的next指向的就是null。但是这里不同，我们每一组的第一个节点变成最后一个节点后，还需要指向下一组的头，所以prev在每组开始反转的时候都应该先指向下一组的头，那么这个下一组的头就是fast-&gt;next。</p><p>每组反转之后，这一组的尾就已经接在下一组的头上了，但是注意，每一组的头都会变的，所以在遍历之后应该让上一组的尾重新指向这个新的头。新的头就是反转结束后prev的位置，而上一组的尾就是slow，所以需要slow-&gt;next = prev;</p><p>挺绕的，还是看图好懂一点吧~</p><p>完整代码如下</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Definition for singly-linked list.</span><br><span class="hljs-comment"> * struct ListNode &#123;</span><br><span class="hljs-comment"> *     int val;</span><br><span class="hljs-comment"> *     ListNode *next;</span><br><span class="hljs-comment"> *     ListNode() : val(0), next(nullptr) &#123;&#125;</span><br><span class="hljs-comment"> *     ListNode(int x) : val(x), next(nullptr) &#123;&#125;</span><br><span class="hljs-comment"> *     ListNode(int x, ListNode *next) : val(x), next(next) &#123;&#125;</span><br><span class="hljs-comment"> * &#125;;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">ListNode* <span class="hljs-title">reverseKGroup</span><span class="hljs-params">(ListNode* head, <span class="hljs-type">int</span> k)</span> </span>&#123;<br>        <span class="hljs-function">ListNode <span class="hljs-title">dummy</span><span class="hljs-params">(<span class="hljs-number">0</span>)</span></span>;<br>        dummy.next = head;<br>        ListNode* fast = &amp;dummy;<br>        ListNode* slow = fast;<br><br>        <span class="hljs-keyword">while</span>(fast)&#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; k; i++)&#123;<br>                <span class="hljs-keyword">if</span>(!fast-&gt;next) <span class="hljs-keyword">return</span> dummy.next;<br>                fast = fast-&gt;next;<br>            &#125;<br>            ListNode* prev = fast-&gt;next;<br>            ListNode* cur = slow-&gt;next;<br>            <span class="hljs-keyword">while</span>(prev != fast)&#123;<br>                ListNode* tmp = cur-&gt;next;<br>                cur-&gt;next = prev;<br>                prev = cur;<br>                cout&lt;&lt;cur-&gt;val&lt;&lt;endl;<br>                cur = tmp;<br>            &#125;<br>            <br>            ListNode* newEnd = slow-&gt;next;<br>            newEnd-&gt;next = cur;<br>            slow-&gt;next = fast;<br>            slow = fast = newEnd;<br>            <br>        &#125;<br>        <span class="hljs-keyword">return</span> dummy.next;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;[LeetCode hot 100] 25. k个一组翻转链表&lt;/h1&gt;
&lt;p&gt;&lt;a href=&quot;https://leetcode.cn/problems/construct-binary-tree-from-preorder-and-inorder-traversal/</summary>
      
    
    
    
    <category term="Algorithm" scheme="http://example.com/categories/Algorithm/"/>
    
    <category term="C++" scheme="http://example.com/categories/Algorithm/C/"/>
    
    <category term="job" scheme="http://example.com/categories/Algorithm/C/job/"/>
    
    
  </entry>
  
  <entry>
    <title>&lt;数据结构/算法&gt; leetcode hot100系列. 53.最大子数组和</title>
    <link href="http://example.com/2024/07/29/lc_53_%E6%9C%80%E5%A4%A7%E5%AD%90%E6%95%B0%E7%BB%84%E5%92%8C/"/>
    <id>http://example.com/2024/07/29/lc_53_%E6%9C%80%E5%A4%A7%E5%AD%90%E6%95%B0%E7%BB%84%E5%92%8C/</id>
    <published>2024-07-28T17:50:00.000Z</published>
    <updated>2024-08-02T18:47:14.961Z</updated>
    
    <content type="html"><![CDATA[<h1>[LeetCode hot 100] 53. 最大子数组和</h1><p><a href="https://leetcode.cn/problems/maximum-subarray/description/?envType=study-plan-v2&amp;envId=top-100-liked">题目链接</a></p><p>这种题我是实在不知道该怎么想出来了，不说思路了，直接说算法流程。</p><p>建立一个新的数组maxSum，这个数组下标为i的位置maxSum代表：nums数组中，以第i个数为结尾的子数组之和的最大值。这时就可以利用类似于前缀和的思路。假如我们已经得到了以第i-1个数为结尾的子数组之和的最大值即maxSum[i-1]，那么以第i位为结尾的子数组之和最大值maxSum[i]一定能够推出来。maxSum[i]的唯一也是最大的要求就是必须包含nums[i]，那么是否包含前面的其他数，其实maxSum[i-1]已经提前算过了。假如maxSum[i-1]大于0，就说明前面选出来的子数组是有正向增益的，要加上才能更大，因此maxSum[i] = maxSum[i-1] + nums[i]。否则就说明以nums[i-1]结尾的子数组里面，和最大也没有大于0的，那干嘛还要再带着这些累赘呢，因此这种情况下maxSum[i] = nums[i]</p><p>完整代码如下</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">maxSubArray</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums)</span> </span>&#123;<br>        <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">maxSum</span><span class="hljs-params">(nums.size())</span></span>;<br>        <span class="hljs-type">int</span> ans = INT_MIN;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; nums.<span class="hljs-built_in">size</span>(); i++)&#123;<br>            <span class="hljs-keyword">if</span>(i == <span class="hljs-number">0</span>) maxSum[i] = nums[i];<br>            <span class="hljs-keyword">else</span> maxSum[i] = <span class="hljs-built_in">max</span>(maxSum[i - <span class="hljs-number">1</span>] + nums[i], nums[i]);<br>            <br>            ans = <span class="hljs-built_in">max</span>(ans, maxSum[i]);<br>        &#125;<br>        <span class="hljs-keyword">return</span> ans;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;[LeetCode hot 100] 53. 最大子数组和&lt;/h1&gt;
&lt;p&gt;&lt;a href=&quot;https://leetcode.cn/problems/maximum-subarray/description/?envType=study-plan-v2&amp;amp;envI</summary>
      
    
    
    
    <category term="Algorithm" scheme="http://example.com/categories/Algorithm/"/>
    
    <category term="C++" scheme="http://example.com/categories/Algorithm/C/"/>
    
    <category term="job" scheme="http://example.com/categories/Algorithm/C/job/"/>
    
    
    <category term="algorithm" scheme="http://example.com/tags/algorithm/"/>
    
    <category term="dp" scheme="http://example.com/tags/dp/"/>
    
  </entry>
  
  <entry>
    <title>&lt;数据结构/算法&gt; leetcode hot100系列. 94.二叉树中序遍历(附所有顺序遍历的非递归实现)</title>
    <link href="http://example.com/2024/07/29/lc_94_%E4%BA%8C%E5%8F%89%E6%A0%91%E4%B8%AD%E5%BA%8F%E9%81%8D%E5%8E%86/"/>
    <id>http://example.com/2024/07/29/lc_94_%E4%BA%8C%E5%8F%89%E6%A0%91%E4%B8%AD%E5%BA%8F%E9%81%8D%E5%8E%86/</id>
    <published>2024-07-28T17:50:00.000Z</published>
    <updated>2024-08-01T19:53:38.372Z</updated>
    
    <content type="html"><![CDATA[<h1>[LeetCode hot 100] 94. 二叉树中序遍历</h1><p><a href="https://leetcode.cn/problems/binary-tree-inorder-traversal/description/?envType=study-plan-v2&amp;envId=top-100-liked">题目链接</a></p><p>这里我们主要说非递归。</p><p>由于中序遍历是左子树-根-右子树的顺序，因此我们在设计算法的时候需要使用栈保存根节点，当左子树遍历完了，再将根节点出栈，然后访问右子树。</p><p>我们直观的想法就是：首先把根节点进栈，然后左孩子进栈，直到把左子树处理完了之后把根节点露出来，然后输出根节点，根节点出栈，根节点的右孩子入栈。这玩意咋用循环迭代实现呢？把根节点拿出来访问右子树这个都会，问题是左子树入栈该遵循一个什么原则呢？理论上我们每次循环判断当前节点如果有左子树就入栈不就行了？</p><p>但是有个问题就是我们不能在出栈的时候再判断有没有左孩子，也就是说找左孩子的活不能从栈顶拿元素再判断，那样的话如果发现有左孩子，你的根节点（也就是现在的栈顶）就不能出栈，但是你最后左子树搞了一圈之后就会发现，栈顶又变成这个根节点了，由于每次循环的判定逻辑都是一样的，所以它的左孩子又会入栈，就成了死循环。</p><p>因此，需要有一个指针来记录当前遍历到的节点，而不是依靠栈顶元素，不然乱套了。每次当前节点有左孩子，就先将当前节点入栈，然后将指针指向左孩子，此时将当前节点入栈的操作代表“我记住你了，待会儿再来遍历你和你的右子树”。不断地将指针指向左孩子，其实就是不断记忆的过程，因为一旦一个节点有左孩子，就要优先处理左子树，先记住根节点和右子树，过后再说。</p><p>直到我们遇到了null，说明终于没有更下一层的左子树了，该遍历中间节点和右子树了，而中间节点现在就在栈顶，这不就好办了吗？</p><p>代码如下，实在理解不了咱就直接背下来吧，别折磨自己了，这博客我写了一小时还没法用流畅的语言表达出来，真吐了。怪不得程序员当久了语言功能会退化。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Definition for a binary tree node.</span><br><span class="hljs-comment"> * struct TreeNode &#123;</span><br><span class="hljs-comment"> *     int val;</span><br><span class="hljs-comment"> *     TreeNode *left;</span><br><span class="hljs-comment"> *     TreeNode *right;</span><br><span class="hljs-comment"> *     TreeNode() : val(0), left(nullptr), right(nullptr) &#123;&#125;</span><br><span class="hljs-comment"> *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) &#123;&#125;</span><br><span class="hljs-comment"> *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) &#123;&#125;</span><br><span class="hljs-comment"> * &#125;;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">inorderTraversal</span><span class="hljs-params">(TreeNode* root)</span> </span>&#123;<br>        stack&lt;TreeNode*&gt; st;<br>        vector&lt;<span class="hljs-type">int</span>&gt; ans;<br>        TreeNode* cur = root;<br>        <span class="hljs-keyword">while</span>(cur || !st.<span class="hljs-built_in">empty</span>())&#123;<br>            <span class="hljs-keyword">while</span>(cur)&#123;<br>                st.<span class="hljs-built_in">push</span>(cur);<br>                cur = cur-&gt;left;<br>            &#125;<br>            cur = st.<span class="hljs-built_in">top</span>();<br>            st.<span class="hljs-built_in">pop</span>();<br>            ans.<span class="hljs-built_in">push_back</span>(cur-&gt;val);<br>            cur = cur-&gt;right;<br>        &#125;<br>        <span class="hljs-keyword">return</span> ans;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="前序遍历非递归">前序遍历非递归</h3><p>那顺便来说一下前序遍历的非递归实现。这个就简单很多，因为不用保存根节点，省去了很多麻烦事，直接把右孩子和左孩子先后入栈即可，每次循环，栈顶元素就是当前节点</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">preorderTraversal</span><span class="hljs-params">(TreeNode* root)</span> </span>&#123;<br>        stack&lt;TreeNode*&gt; st;<br>        vector&lt;<span class="hljs-type">int</span>&gt; ans;<br>        st.<span class="hljs-built_in">push</span>(root);<br>        <span class="hljs-keyword">while</span>(!st.<span class="hljs-built_in">empty</span>())&#123;<br>            TreeNode* cur = st.<span class="hljs-built_in">top</span>();<br>            ans.<span class="hljs-built_in">push_back</span>(cur-&gt;val);<br>            <span class="hljs-keyword">if</span>(cur-&gt;right)&#123;<br>                st.<span class="hljs-built_in">push</span>(cur-&gt;right);<br>            &#125;<br>            <span class="hljs-keyword">if</span>(cur-&gt;left)&#123;<br>                st.<span class="hljs-built_in">push</span>(cur-&gt;left);<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> ans;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="后序遍历非递归">后序遍历非递归</h3><p>后序遍历的关键之关键之关键是要保存一下上一次访问的节点，因为虽然先访问的是根节点，但是根节点却不能出栈。为了在访问栈顶结点的时候方便判断是左子树右子树都遍历完了还是都没有遍历，需要保存上一个访问的节点，如果上一个访问的是左孩子或右孩子，那就说明需要访问根节点并且出栈，否则就说明需要将左右孩子入栈。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">postorderTraversal</span><span class="hljs-params">(TreeNode* root)</span> </span>&#123;<br>        stack&lt;TreeNode*&gt; st;<br>        vector&lt;<span class="hljs-type">int</span>&gt; ans;<br>        <span class="hljs-keyword">if</span>(!root) <span class="hljs-keyword">return</span> ans;<br>        st.<span class="hljs-built_in">push</span>(root);<br>        TreeNode* prev = <span class="hljs-literal">nullptr</span>;<br>        <span class="hljs-keyword">while</span>(!st.<span class="hljs-built_in">empty</span>())&#123;<br>            TreeNode* cur = st.<span class="hljs-built_in">top</span>();<br>            <span class="hljs-keyword">if</span>((!cur-&gt;left &amp;&amp; !cur-&gt;right) || prev &amp;&amp; (prev == cur-&gt;left || prev == cur-&gt;right))&#123;<br>                st.<span class="hljs-built_in">pop</span>();<br>                ans.<span class="hljs-built_in">push_back</span>(cur-&gt;val);<br>                prev = cur;<br>            &#125; <span class="hljs-keyword">else</span>&#123;<br>                <span class="hljs-keyword">if</span>(cur-&gt;right)&#123;<br>                    st.<span class="hljs-built_in">push</span>(cur-&gt;right);<br>                &#125;<br>                <span class="hljs-keyword">if</span>(cur-&gt;left)&#123;<br>                    st.<span class="hljs-built_in">push</span>(cur-&gt;left);<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> ans;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p>事实上还有一种更讨巧的算法，那就是前序遍历只要把左右子树的顺序换一下，就刚好与后序遍历的序列相反。因此可以用前序遍历来构造后序遍历。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">preorderTraversal</span><span class="hljs-params">(TreeNode* root)</span> </span>&#123;<br>        stack&lt;TreeNode*&gt; st;<br>        vector&lt;<span class="hljs-type">int</span>&gt; ans;<br>        st.<span class="hljs-built_in">push</span>(root);<br>        <span class="hljs-keyword">while</span>(!st.<span class="hljs-built_in">empty</span>())&#123;<br>            TreeNode* cur = st.<span class="hljs-built_in">top</span>();<br>            ans.<span class="hljs-built_in">push_back</span>(cur-&gt;val);<br>            <span class="hljs-keyword">if</span>(cur-&gt;left)&#123;<br>                st.<span class="hljs-built_in">push</span>(cur-&gt;left);<br>            &#125;<br>            <span class="hljs-keyword">if</span>(cur-&gt;right)&#123;<br>                st.<span class="hljs-built_in">push</span>(cur-&gt;right);<br>            &#125;<br>        &#125;<br>        <span class="hljs-built_in">reverse</span>(ans.<span class="hljs-built_in">begin</span>(), ans.<span class="hljs-built_in">end</span>());<span class="hljs-comment">//反转后就是后续遍历的序列</span><br>        <span class="hljs-keyword">return</span> ans;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;[LeetCode hot 100] 94. 二叉树中序遍历&lt;/h1&gt;
&lt;p&gt;&lt;a href=&quot;https://leetcode.cn/problems/binary-tree-inorder-traversal/description/?envType=study-pl</summary>
      
    
    
    
    <category term="Algorithm" scheme="http://example.com/categories/Algorithm/"/>
    
    <category term="C++" scheme="http://example.com/categories/Algorithm/C/"/>
    
    <category term="job" scheme="http://example.com/categories/Algorithm/C/job/"/>
    
    
    <category term="algorithm" scheme="http://example.com/tags/algorithm/"/>
    
    <category term="binary-tree" scheme="http://example.com/tags/binary-tree/"/>
    
  </entry>
  
  <entry>
    <title>&lt;数据结构/算法&gt; leetcode hot100系列. 110.盛水最多的容器</title>
    <link href="http://example.com/2024/07/25/lc_110_%E7%9B%9B%E6%B0%B4%E6%9C%80%E5%A4%9A%E7%9A%84%E5%AE%B9%E5%99%A8/"/>
    <id>http://example.com/2024/07/25/lc_110_%E7%9B%9B%E6%B0%B4%E6%9C%80%E5%A4%9A%E7%9A%84%E5%AE%B9%E5%99%A8/</id>
    <published>2024-07-24T17:50:00.000Z</published>
    <updated>2024-07-24T17:28:02.118Z</updated>
    
    <content type="html"><![CDATA[<h1>[LeetCode hot 100] 110. 盛水最多的容器</h1><p><a href="https://leetcode.cn/problems/container-with-most-water/description/?envType=study-plan-v2&amp;envId=top-100-liked">题目链接</a></p><p>最烦这种题，因为每次都感觉自己那么接近答案，就是做不出来，像个傻子一样。</p><p>怎样思考这个问题？首先我们从左往右看一看，假如有两根柱子，左边的柱子比右边的高，那么当选取这两个柱子之一作为左边的容器壁时，右边的柱子是一定会输的。</p><p>考虑数组的左右两个端点，假如左边的柱子更矮，那么右边的柱子无论再怎么高也没有用，这就是所谓的木桶效应。所以事实上以最左侧柱子为左端点的容器都不需要看了，因为不会有比现在更大的了。这也就是说，最左侧的柱子被“pass”了。</p><p>那么接下来就算一下这个容器的容量，然后把最左侧的柱子扔了，换第二个，也就是left指针右移。对于新的左右端点，运用同样的思路，排掉较短的那一根，如此循环直到左右端点相遇。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">maxArea</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; height)</span> </span>&#123;<br>        <span class="hljs-type">int</span> left = <span class="hljs-number">0</span>, right = height.<span class="hljs-built_in">size</span>() - <span class="hljs-number">1</span>;<br>        <span class="hljs-type">int</span> maxVolume = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span>(left &lt; right)&#123;<br>            <span class="hljs-type">int</span> curVolume = (right - left) * <span class="hljs-built_in">min</span>(height[left], height[right]);<br>            maxVolume = <span class="hljs-built_in">max</span>(maxVolume, curVolume);<br>            <span class="hljs-keyword">if</span>(height[left] &gt;= height[right])&#123;<br>                right--;<br>            &#125; <span class="hljs-keyword">else</span>&#123;<br>                left++;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> maxVolume;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;[LeetCode hot 100] 110. 盛水最多的容器&lt;/h1&gt;
&lt;p&gt;&lt;a href=&quot;https://leetcode.cn/problems/container-with-most-water/description/?envType=study-plan-</summary>
      
    
    
    
    <category term="Algorithm" scheme="http://example.com/categories/Algorithm/"/>
    
    <category term="C++" scheme="http://example.com/categories/Algorithm/C/"/>
    
    <category term="job" scheme="http://example.com/categories/Algorithm/C/job/"/>
    
    
    <category term="algorithm" scheme="http://example.com/tags/algorithm/"/>
    
    <category term="two-pointers" scheme="http://example.com/tags/two-pointers/"/>
    
  </entry>
  
  <entry>
    <title>&lt;数据结构/算法&gt; leetcode hot100系列. 128.最长连续序列</title>
    <link href="http://example.com/2024/07/25/lc_128_%E6%9C%80%E9%95%BF%E8%BF%9E%E7%BB%AD%E5%BA%8F%E5%88%97/"/>
    <id>http://example.com/2024/07/25/lc_128_%E6%9C%80%E9%95%BF%E8%BF%9E%E7%BB%AD%E5%BA%8F%E5%88%97/</id>
    <published>2024-07-24T17:50:00.000Z</published>
    <updated>2024-08-02T18:46:32.774Z</updated>
    
    <content type="html"><![CDATA[<h1>[LeetCode hot 100] 128. 最长连续序列</h1><p><a href="https://leetcode.cn/problems/longest-consecutive-sequence/?envType=study-plan-v2&amp;envId=top-100-liked">题目链接</a></p><p>遇到这种题，首先想一想，作为一个人类，我们怎么思考这个问题。我们肯定是每看到一个数就去整个序列里面找有没有挨着的，如果有，那就顺着继续找，最后一个数一个数地摘出来，算一个长度对吗？</p><p>简化这个过程，我们不需要每个数都找，而是只需要从一个连续序列开头的那个数往后找就行。</p><ol><li>首先先遍历一下这个数组，并且放入集合中，一来是去重，二来是方便后面的查找。</li><li>遍历这个集合，对于每个元素e，如果集合中存在比它小1的元素e-1，那就先不管这个数，因为肯定不是一个连续序列的开头。</li><li>如果集合中不存在e-1，就说明e一定是一个连续序列的开头，那么就开始找e+1, e+2, …, e+n，直到e+n找不到了，说明序列到此结束，当前序列的长度就是n。</li><li>最后遍历完之后输出序列长度的最大值就行。</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">longestConsecutive</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums)</span> </span>&#123;<br>        set&lt;<span class="hljs-type">int</span>&gt; numSet;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span>&amp; num : nums)&#123;<br>            numSet.<span class="hljs-built_in">emplace</span>(num);<br>        &#125;<br>        <span class="hljs-type">int</span> maxLength = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span>&amp; num : numSet)&#123;<br>            <span class="hljs-keyword">if</span>(numSet.<span class="hljs-built_in">count</span>(num<span class="hljs-number">-1</span>))<br>                <span class="hljs-keyword">continue</span>;<br>            <span class="hljs-type">int</span> len = <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">while</span>(numSet.<span class="hljs-built_in">count</span>(num+len))&#123;<br>                len++;<br>            &#125;<br>            maxLength = <span class="hljs-built_in">max</span>(maxLength, len);<br>        &#125;<br>        <span class="hljs-keyword">return</span> maxLength;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;[LeetCode hot 100] 128. 最长连续序列&lt;/h1&gt;
&lt;p&gt;&lt;a href=&quot;https://leetcode.cn/problems/longest-consecutive-sequence/?envType=study-plan-v2&amp;amp;env</summary>
      
    
    
    
    <category term="Algorithm" scheme="http://example.com/categories/Algorithm/"/>
    
    <category term="C++" scheme="http://example.com/categories/Algorithm/C/"/>
    
    <category term="job" scheme="http://example.com/categories/Algorithm/C/job/"/>
    
    
    <category term="algorithm" scheme="http://example.com/tags/algorithm/"/>
    
    <category term="hash" scheme="http://example.com/tags/hash/"/>
    
  </entry>
  
  <entry>
    <title>&lt;数据结构/算法&gt; leetcode hot100系列. 22.括号生成Generate Parenthesis</title>
    <link href="http://example.com/2024/07/25/lc_49_%E5%AD%97%E6%AF%8D%E5%BC%82%E4%BD%8D%E8%AF%8D%E5%88%86%E7%BB%84/"/>
    <id>http://example.com/2024/07/25/lc_49_%E5%AD%97%E6%AF%8D%E5%BC%82%E4%BD%8D%E8%AF%8D%E5%88%86%E7%BB%84/</id>
    <published>2024-07-24T17:50:00.000Z</published>
    <updated>2024-07-24T09:57:22.222Z</updated>
    
    <content type="html"><![CDATA[<h1>[LeetCode hot 100] 49. 字母异位词分组</h1><p><a href="https://leetcode.cn/problems/group-anagrams/solutions/520469/zi-mu-yi-wei-ci-fen-zu-by-leetcode-solut-gyoc/?envType=study-plan-v2&amp;envId=top-100-liked">题目链接</a></p><p>这道题比较直觉的做法就是先对每个词排序，因为不同异位词按照字母排序之后的异位词就是统一的了，因此将这个排序后的词作为map的键，查找map时如果存在这个键，就按照map中记录的位置去找这个键对应的异位词分组在返回结果中的位置，并且在这个异位词分组后面加上当前字符串。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    vector&lt;vector&lt;string&gt;&gt; <span class="hljs-built_in">groupAnagrams</span>(vector&lt;string&gt;&amp; strs) &#123;<br>        vector&lt;vector&lt;string&gt;&gt; ans;<br>        map&lt;string, <span class="hljs-type">int</span>&gt; posMap;<br>        <span class="hljs-type">int</span> pos = <span class="hljs-number">0</span>;<span class="hljs-comment">//分组的下一个下标</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span>&amp; str : strs)&#123;<br>            string cur = str;<br>            <span class="hljs-built_in">sort</span>(cur.<span class="hljs-built_in">begin</span>(), cur.<span class="hljs-built_in">end</span>());<br>            <span class="hljs-keyword">if</span>(posMap.<span class="hljs-built_in">find</span>(cur) == posMap.<span class="hljs-built_in">end</span>())&#123;<br>                posMap.<span class="hljs-built_in">emplace</span>(cur, pos);<br>                vector&lt;string&gt; anagramList;<br>                anagramList.<span class="hljs-built_in">push_back</span>(str);<br>                ans.<span class="hljs-built_in">push_back</span>(anagramList);<br>                pos++;<br>            &#125; <span class="hljs-keyword">else</span>&#123;<br>                <span class="hljs-type">int</span> curPos = posMap.<span class="hljs-built_in">find</span>(cur)-&gt;second;<br>                ans[curPos].<span class="hljs-built_in">push_back</span>(str);<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> ans;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;[LeetCode hot 100] 49. 字母异位词分组&lt;/h1&gt;
&lt;p&gt;&lt;a href=&quot;https://leetcode.cn/problems/group-anagrams/solutions/520469/zi-mu-yi-wei-ci-fen-zu-by-l</summary>
      
    
    
    
    <category term="Algorithm" scheme="http://example.com/categories/Algorithm/"/>
    
    <category term="C++" scheme="http://example.com/categories/Algorithm/C/"/>
    
    <category term="job" scheme="http://example.com/categories/Algorithm/C/job/"/>
    
    
    <category term="algorithm" scheme="http://example.com/tags/algorithm/"/>
    
    <category term="hash" scheme="http://example.com/tags/hash/"/>
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://example.com/2024/07/05/%E4%BD%BF%E7%94%A8vue%E5%92%8Celementui%E9%81%87%E5%88%B0%E7%9A%84%E5%90%84%E7%A7%8D%E5%9D%91/"/>
    <id>http://example.com/2024/07/05/%E4%BD%BF%E7%94%A8vue%E5%92%8Celementui%E9%81%87%E5%88%B0%E7%9A%84%E5%90%84%E7%A7%8D%E5%9D%91/</id>
    <published>2024-07-04T18:37:01.614Z</published>
    <updated>2024-07-11T03:33:41.155Z</updated>
    
    <content type="html"><![CDATA[<h1>使用vue和elementui遇到的各种坑</h1><h3 id="正则表达式报错">正则表达式报错</h3><p>一般是因为其中的反斜杠解析错误，在后面加上</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span> eslint-disable-line<br></code></pre></td></tr></table></figure><p>这个注释就好</p><h3 id="el-form几种表单验证方式">el-form几种表单验证方式</h3><p><a href="https://blog.csdn.net/weixin_45046532/article/details/137624361">https://blog.csdn.net/weixin_45046532/article/details/137624361</a></p><h3 id="常用表单域验证正则匹配">常用表单域验证正则匹配</h3><p><a href="https://blog.csdn.net/2401_84092423/article/details/137700320">https://blog.csdn.net/2401_84092423/article/details/137700320</a></p><h3 id="嵌套el-form-item">嵌套el-form-item</h3><p><a href="https://blog.csdn.net/weixin_69670563/article/details/135880729">https://blog.csdn.net/weixin_69670563/article/details/135880729</a></p><h3 id="el-form里出现一个item包含多个输入，怎样进行表单域验证？">el-form里出现一个item包含多个输入，怎样进行表单域验证？</h3><h3 id="邮箱验证">邮箱验证</h3><figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs taggerscript">/^<span class="hljs-symbol">\\</span>s*<span class="hljs-symbol">\\</span>w+(?:<span class="hljs-symbol">\\</span>.&#123;0,1&#125;[<span class="hljs-symbol">\\</span>w-]+)*@[a-zA-Z0-9]+(?:[-.][a-zA-Z0-9]+)*<span class="hljs-symbol">\\</span>.[a-zA-Z]+<span class="hljs-symbol">\\</span>s*$/<br></code></pre></td></tr></table></figure><p>/^\s*\w+(?:\.{0,1}[\w-]+)<em>@[a-zA-Z0-9]+(?:[-.][a-zA-Z0-9]+)</em>\.[a-zA-Z]+\s*$/</p><p>87558353</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;使用vue和elementui遇到的各种坑&lt;/h1&gt;
&lt;h3 id=&quot;正则表达式报错&quot;&gt;正则表达式报错&lt;/h3&gt;
&lt;p&gt;一般是因为其中的反斜杠解析错误，在后面加上&lt;/p&gt;
&lt;figure class=&quot;highlight awk&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>&lt;数据结构/算法&gt; 我一定要学会【堆】-第k大</title>
    <link href="http://example.com/2024/06/20/%E6%88%91%E4%B8%80%E5%AE%9A%E8%A6%81%E5%AD%A6%E4%BC%9A%E3%80%90%E5%A0%86%E3%80%91/"/>
    <id>http://example.com/2024/06/20/%E6%88%91%E4%B8%80%E5%AE%9A%E8%A6%81%E5%AD%A6%E4%BC%9A%E3%80%90%E5%A0%86%E3%80%91/</id>
    <published>2024-06-19T20:30:00.000Z</published>
    <updated>2024-06-19T12:27:33.689Z</updated>
    
    <content type="html"><![CDATA[<h1>我一定要学会【堆】</h1><p>气死了，每次写关于堆的算法都要重新复习一遍，今天一定要搞清楚。</p><h3 id="什么是堆">什么是堆</h3><p>堆是一种数据结构，其中的数据以完全二叉树的逻辑组织，但是存储数据的结构使用的是数组。也就是说，要用数组表示一个树的结构。堆分为两种：</p><ul><li>大根堆：树中任何一个节点大于或等于他的两个孩子节点。</li><li>小根堆：与大根堆相反。</li></ul><p>我们这里以大根堆为例。</p><p>堆在数组中存放的顺序是层序，也就是说先存第一层，再存第二层，……由于堆是完全二叉树，所以在数组中存放时，每个节点与其左右孩子节点的位置关系都是可以确定的。</p><ul><li>父节点位置：k</li><li>左孩子位置：2k+1</li><li>右孩子位置：2k+2</li></ul><h3 id="堆的调整">堆的调整</h3><p>由于堆的结构特殊性，所以先要了解堆的调整策略。堆的调整是将不符合堆的结构调整成符合堆的数据结构，分为向上调整和向下调整。</p><h4 id="向上调整">向上调整</h4><p>向上调整又叫上浮，发生在堆底（也就是末尾）插入新元素的时候，这时要把插入的元素调整到正确的位置，具体做法是确定父节点的位置，与之比较，如果比父节点大就和父节点交换，直到比父节点小，被管住了，就老实呆在那里了。代码如下</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">adjustUp</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; heap, <span class="hljs-type">int</span> child)</span></span>&#123;<br>    <span class="hljs-type">int</span> parent = (child - <span class="hljs-number">1</span>) / <span class="hljs-number">2</span>;<br>    <span class="hljs-keyword">while</span>(parent &gt;= <span class="hljs-number">0</span> &amp;&amp; heap[child] &gt; heap[parent])&#123;<br>        <span class="hljs-type">int</span> tmp = heap[parent];<br>        heap[parent] = heap[child];<br>        heap[child] = tmp;<br>        child = parent;<br>        parent = (child - <span class="hljs-number">1</span>) / <span class="hljs-number">2</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="向下调整">向下调整</h4><p>向下调整又叫下沉，发生在堆顶元素改变时。此时需要堆顶元素与两个孩子比较，假如父节点元素不是最大的，说明父节点管不住孩子了，需要将其中最大的孩子扶持为新的堆顶，如此循环直到父节点比他的两个孩子都大。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">adjustDown</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; heap, <span class="hljs-type">int</span> parent)</span></span>&#123;<br>    <span class="hljs-type">int</span> lchild = <span class="hljs-number">2</span> * parent + <span class="hljs-number">1</span>;<br>    <span class="hljs-type">int</span> rchild = lchild + <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span>(lchild &lt; heap.<span class="hljs-built_in">size</span>())&#123;<br>        <span class="hljs-type">int</span> largest = lchild;<br>        <br>        <span class="hljs-keyword">if</span>(rchild &gt;= heap.<span class="hljs-built_in">size</span>() || heap[lchild] &gt; heap[rchild])<br>            largest = rchild;<br>        <br>        <span class="hljs-keyword">if</span>(heap[parent] &gt; heap[largest])<br>            <span class="hljs-keyword">break</span>;<br>        <br>        <span class="hljs-type">int</span> tmp = heap[parent];<br>        heap[parent] = heap[largest];<br>        heap[largest] = tmp;<br>        <br>        parent = largest;<br>        lchild = <span class="hljs-number">2</span> * parent + <span class="hljs-number">1</span>;<br>        rchild = <span class="hljs-number">2</span> * parent + <span class="hljs-number">2</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="插入元素">插入元素</h3><p>现在有了两种调整堆的方法，很容易就能插入元素。把元素放到堆底并向上调整就行。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">heapInsert</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; heap, <span class="hljs-type">int</span> val)</span></span>&#123;<br>    heap.<span class="hljs-built_in">push_back</span>(val);<br>    <span class="hljs-built_in">adjustUp</span>(heap, heap.<span class="hljs-built_in">size</span>() - <span class="hljs-number">1</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="堆的创建">堆的创建</h3><p>那创建堆不就是一个一个元素往堆里面插入吗？</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">buildHeap</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; heap, vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums)</span></span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; nums.<span class="hljs-built_in">size</span>(); i++)&#123;<br>        <span class="hljs-built_in">heapInsert</span>(heap, nums[i]);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>但是</strong>这样其实多做了很多无意义的操作，事实上，只要从孩子一步一步往父节点调整就够了，调整次数为logn，即：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">buildHeap</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums)</span></span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = (nums.<span class="hljs-built_in">size</span>() - <span class="hljs-number">1</span>) / <span class="hljs-number">2</span>; i &gt;= <span class="hljs-number">0</span>; i--)&#123;<br>        <span class="hljs-built_in">adjustDown</span>(nums, i);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>太神奇了，这甚至是在原数组上就进行了，相当于对于倒数第二层的节点，首先调整以他们为堆顶的子堆，满足大根堆的性质（使用向下调整），然后调整他们父母为顶的子堆，满足大根堆的性质，直到调整到整个堆的顶部，就能保证整个堆满足了大根堆的性质。</p><h3 id="删除元素">删除元素</h3><p>删除任何一个元素都是一样的，只需要把这个元素放到最后，然后把堆的大小一缩，诶，那个元素就被挡在外面了。那么原本末尾的元素呢，就放到删掉的元素的原本的位置，也就是位置互换了。互换之后末尾的元素还在堆内，但是不满足堆的性质了，所以需要根据和父节点、两个子节点的大小关系判断该选择上浮还是下沉。但是一般我们常用的就是删除堆顶，那堆顶都删没了，新进来的元素肯定没有第二层的大呀，所以需要下沉调整。</p><p>这里注意，有的时候我们只是需要形式上把堆顶拿出来，放在后面，并不需要真的把它从这个数组中删掉，只是不在堆中了。这时我们可以使用一个元素来代表堆的末尾指针。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">heapPop</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; heap, <span class="hljs-type">int</span> end)</span></span>&#123;<br>    <span class="hljs-type">int</span> tmp = heap[end];<br>    heap[end] = heap[<span class="hljs-number">0</span>];<br>    heap[<span class="hljs-number">0</span>] = tmp;<br>    <span class="hljs-built_in">adjustDown</span>(heap, <span class="hljs-number">0</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="堆的应用-第k大元素">堆的应用-第k大元素</h3><p>堆在找第k大这种问题上应用比较多。具体就是使用我们的删除操作，每轮删掉一个最大的，这样删k轮就找到第k大了。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">findKth</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums, <span class="hljs-type">int</span> k)</span></span>&#123;<br>    <span class="hljs-built_in">buildHeap</span>(nums);<br>    <span class="hljs-type">int</span> end = nums.<span class="hljs-built_in">size</span>() - <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; k; i++)&#123;<br>        <span class="hljs-built_in">heapPop</span>(nums, end);<br>        end--;<br>    &#125;<br>    <span class="hljs-keyword">return</span> end + <span class="hljs-number">1</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>但是其实这样是绕了弯路的，因为需要首先建堆，然后一次一次地调整。如果我们换一种思路呢？我们可以用大根堆维护所有的元素，那我们也可以用一个小根堆维护前k大的元素，这个时候小根堆的堆顶就是第k大的元素，每来一个数就和堆顶比较一下，如果比堆顶小，那么说明数组中已经发现了k个比堆顶元素大的数，那么堆顶显然就不可能是前k大的元素之一了，应该被踢掉。如此遍历整个数组，就能得到整个数组前k大的数构成的小根堆，堆顶就是第k大的元素。</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-built_in">int</span> find<span class="hljs-constructor">Kth(<span class="hljs-params">vector</span>&lt;<span class="hljs-params">int</span>&gt;&amp; <span class="hljs-params">nums</span>, <span class="hljs-params">int</span> <span class="hljs-params">k</span>)</span>&#123;<br>vector&lt;<span class="hljs-built_in">int</span>&gt; heap;<br><span class="hljs-keyword">for</span>(<span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span>; i &lt; k; i++)&#123;<br>heap<span class="hljs-constructor">Insert(<span class="hljs-params">heap</span>, <span class="hljs-params">nums</span>[<span class="hljs-params">k</span>])</span>;<span class="hljs-comment">//注意这里的heapInsert应该根据小根堆来写</span><br>&#125;<br><span class="hljs-keyword">for</span>(<span class="hljs-built_in">int</span> i = k; i &lt; nums.size<span class="hljs-literal">()</span>; i++)&#123;<br><span class="hljs-keyword">if</span>(nums<span class="hljs-literal">[<span class="hljs-identifier">i</span>]</span> &gt; heap<span class="hljs-literal">[<span class="hljs-number">0</span>]</span>)&#123;<br>heap<span class="hljs-literal">[<span class="hljs-number">0</span>]</span> = nums<span class="hljs-literal">[<span class="hljs-identifier">i</span>]</span>;<span class="hljs-comment">//替换掉堆顶</span><br>adjust<span class="hljs-constructor">Down(<span class="hljs-params">heap</span>, 0)</span>;<span class="hljs-comment">//向下调整</span><br>&#125;<br>&#125;<br>return heap<span class="hljs-literal">[<span class="hljs-number">0</span>]</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;我一定要学会【堆】&lt;/h1&gt;
&lt;p&gt;气死了，每次写关于堆的算法都要重新复习一遍，今天一定要搞清楚。&lt;/p&gt;
&lt;h3 id=&quot;什么是堆&quot;&gt;什么是堆&lt;/h3&gt;
&lt;p&gt;堆是一种数据结构，其中的数据以完全二叉树的逻辑组织，但是存储数据的结构使用的是数组。也就是说，要用数组表示一个</summary>
      
    
    
    
    <category term="Algorithm" scheme="http://example.com/categories/Algorithm/"/>
    
    <category term="C++" scheme="http://example.com/categories/Algorithm/C/"/>
    
    <category term="job" scheme="http://example.com/categories/Algorithm/C/job/"/>
    
    
    <category term="algorithm" scheme="http://example.com/tags/algorithm/"/>
    
    <category term="heap" scheme="http://example.com/tags/heap/"/>
    
  </entry>
  
  <entry>
    <title>&lt;数据结构/算法&gt; leetcode hot100系列. 22.括号生成Generate Parenthesis</title>
    <link href="http://example.com/2024/06/16/lc_22_generate_parenthesis/"/>
    <id>http://example.com/2024/06/16/lc_22_generate_parenthesis/</id>
    <published>2024-06-15T17:50:00.000Z</published>
    <updated>2024-06-16T18:04:21.326Z</updated>
    
    <content type="html"><![CDATA[<h1>[LeetCode hot 100] 22. 括号生成Generate Parenthesis</h1><p>这个也是一道回溯题，核心是要意识到一个现有的序列中左括号数量一定不能比右括号少，否则就会出现有右括号没有左括号对应的情况。什么都没有的情况下，第一个只能来左括号，当有一个&quot;(“，第二个就可以是”(“或”)“。如果第二个是”(“，第三个是啥都行，但是如果第二个是”)&quot;，前面的左括号和右括号就全部配对了，第三个就只能是左括号。有了这个思路，每次向下搜索时：</p><ul><li>如果之前序列左括号总数大于右括号总数，下一个就可以是左括号也可以是右括号。</li><li>如果左括号总数等于右括号总数，下一个就只能是左括号。</li></ul><p>那么就可以写代码了：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">vector&lt;string&gt; <span class="hljs-title">generateParenthesis</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span> </span>&#123;<br>        vector&lt;string&gt; ans;<br>        string cur;<br>        <span class="hljs-built_in">backtrack</span>(ans, cur, n, n);<br>        <span class="hljs-keyword">return</span> ans;<br>    &#125;<br>    <br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">backtrack</span><span class="hljs-params">(vector&lt;string&gt;&amp; ans, string cur, <span class="hljs-type">int</span> left, <span class="hljs-type">int</span> right)</span></span>&#123;<br>        <span class="hljs-keyword">if</span>(left == <span class="hljs-number">0</span>)&#123;<br>            <span class="hljs-keyword">while</span>(right &gt; <span class="hljs-number">0</span>)&#123;<br>                cur += <span class="hljs-string">&quot;)&quot;</span>;<br>                right--;<br>            &#125;<br>            ans.<span class="hljs-built_in">push_back</span>(cur);<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <br>        <span class="hljs-keyword">if</span>(left &lt; right)&#123;<br>            <span class="hljs-built_in">backtrack</span>(ans, cur+<span class="hljs-string">&quot;(&quot;</span>, left<span class="hljs-number">-1</span>, right);<br>            <span class="hljs-built_in">backtrack</span>(ans, cur+<span class="hljs-string">&quot;)&quot;</span>, left, right<span class="hljs-number">-1</span>);<br>        &#125;<br>        <span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-built_in">backtrack</span>(ans, cur+<span class="hljs-string">&quot;(&quot;</span>, left<span class="hljs-number">-1</span>, right);<br>        &#125;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;[LeetCode hot 100] 22. 括号生成Generate Parenthesis&lt;/h1&gt;
&lt;p&gt;这个也是一道回溯题，核心是要意识到一个现有的序列中左括号数量一定不能比右括号少，否则就会出现有右括号没有左括号对应的情况。什么都没有的情况下，第一个只能来左括号</summary>
      
    
    
    
    <category term="Algorithm" scheme="http://example.com/categories/Algorithm/"/>
    
    <category term="C++" scheme="http://example.com/categories/Algorithm/C/"/>
    
    <category term="job" scheme="http://example.com/categories/Algorithm/C/job/"/>
    
    
    <category term="algorithm" scheme="http://example.com/tags/algorithm/"/>
    
    <category term="backtrack" scheme="http://example.com/tags/backtrack/"/>
    
  </entry>
  
  <entry>
    <title>&lt;数据结构/算法&gt; leetcode hot100系列. 695.最大岛屿面积</title>
    <link href="http://example.com/2024/06/16/lc_695_%E6%9C%80%E5%A4%A7%E5%B2%9B%E5%B1%BF%E9%9D%A2%E7%A7%AF/"/>
    <id>http://example.com/2024/06/16/lc_695_%E6%9C%80%E5%A4%A7%E5%B2%9B%E5%B1%BF%E9%9D%A2%E7%A7%AF/</id>
    <published>2024-06-15T17:50:00.000Z</published>
    <updated>2024-08-11T07:11:39.947Z</updated>
    
    <content type="html"><![CDATA[<h1>[LeetCode hot 100] 695. 岛屿的最大面积</h1><p><a href="https://leetcode.cn/problems/max-area-of-island/description/">题目链接</a></p><p>我看这还是一个常考的题目。这种题适合用dfs，从每一个点向四周深度优先搜索，用一个visited数组保存每个点是否被访问过，如果访问过就不要重复计算了。如果访问到0，或者到界外了，就返回0，否则就是上下左右的面积之和再+1（自己本身还占一格）。遇到访问过的也是直接返回0，表示要么在这一次计算中重复访问了，要么就是之前在从别的点开始计算时已经计算过了。</p><p>完整代码如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">dfs</span><span class="hljs-params">(vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt;&amp; grid, <span class="hljs-type">int</span> idx1, <span class="hljs-type">int</span> idx2, vector&lt;vector&lt;<span class="hljs-type">bool</span>&gt;&gt;&amp; visited)</span></span>&#123;<br>        <span class="hljs-keyword">if</span>(idx1 &lt; <span class="hljs-number">0</span> || idx1 &gt;= grid.<span class="hljs-built_in">size</span>() || idx2 &lt; <span class="hljs-number">0</span> || idx2 &gt;= grid[<span class="hljs-number">0</span>].<span class="hljs-built_in">size</span>())&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(visited[idx1][idx2] || grid[idx1][idx2] == <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-comment">// cout&lt;&lt;idx1&lt;&lt;&quot;,&quot;&lt;&lt;idx2&lt;&lt;endl;</span><br>        visited[idx1][idx2] = <span class="hljs-literal">true</span>;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">dfs</span>(grid, idx1 - <span class="hljs-number">1</span>, idx2, visited) +<br>            <span class="hljs-built_in">dfs</span>(grid, idx1 + <span class="hljs-number">1</span>, idx2, visited) +<br>            <span class="hljs-built_in">dfs</span>(grid, idx1, idx2 - <span class="hljs-number">1</span>, visited) + <br>            <span class="hljs-built_in">dfs</span>(grid, idx1, idx2 + <span class="hljs-number">1</span>, visited) + <span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">maxAreaOfIsland</span><span class="hljs-params">(vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt;&amp; grid)</span> </span>&#123;<br>        vector&lt;vector&lt;<span class="hljs-type">bool</span>&gt;&gt; visited;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; grid.<span class="hljs-built_in">size</span>(); i++)&#123;<br>            <span class="hljs-function">vector&lt;<span class="hljs-type">bool</span>&gt; <span class="hljs-title">tmp</span><span class="hljs-params">(grid[<span class="hljs-number">0</span>].size(), <span class="hljs-literal">false</span>)</span></span>;<br>            visited.<span class="hljs-built_in">push_back</span>(tmp);<br>        &#125;<br>        <span class="hljs-type">int</span> maxArea = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; grid.<span class="hljs-built_in">size</span>(); i++)&#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; grid[<span class="hljs-number">0</span>].<span class="hljs-built_in">size</span>(); j++)&#123;<br>                maxArea = <span class="hljs-built_in">max</span>(maxArea, <span class="hljs-built_in">dfs</span>(grid, i, j, visited));<br>                <br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> maxArea;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;[LeetCode hot 100] 695. 岛屿的最大面积&lt;/h1&gt;
&lt;p&gt;&lt;a href=&quot;https://leetcode.cn/problems/max-area-of-island/description/&quot;&gt;题目链接&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;我看这还是一个常考</summary>
      
    
    
    
    <category term="Algorithm" scheme="http://example.com/categories/Algorithm/"/>
    
    <category term="C++" scheme="http://example.com/categories/Algorithm/C/"/>
    
    <category term="job" scheme="http://example.com/categories/Algorithm/C/job/"/>
    
    
    <category term="algorithm" scheme="http://example.com/tags/algorithm/"/>
    
    <category term="backtrack" scheme="http://example.com/tags/backtrack/"/>
    
  </entry>
  
  <entry>
    <title>&lt;数据结构/算法&gt; 2.归并排序Merge Sort</title>
    <link href="http://example.com/2024/06/13/%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8FMergeSort/"/>
    <id>http://example.com/2024/06/13/%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8FMergeSort/</id>
    <published>2024-06-12T17:50:00.000Z</published>
    <updated>2024-06-12T09:45:35.909Z</updated>
    
    <content type="html"><![CDATA[<h1>归并排序Merge Sort</h1><p>归并排序个人感觉理解起来没什么难度，主要就是一个递归地合并子序列的过程，直接写代码，在代码特殊的地方说明一下</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">merge</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt; &amp;arr, <span class="hljs-type">int</span> left, <span class="hljs-type">int</span> mid, <span class="hljs-type">int</span> right)</span></span>&#123;<br>    <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">tmp</span><span class="hljs-params">(right - left + <span class="hljs-number">1</span>)</span></span>;<br>    <span class="hljs-type">int</span> pl = left, pr = mid;<br>    <span class="hljs-keyword">while</span>(pl &lt;= mid - <span class="hljs-number">1</span> &amp;&amp; pr &lt;= right)&#123;<br>        <span class="hljs-keyword">if</span>(arr[pl] &lt; arr[pr])&#123;<br>            tmp.<span class="hljs-built_in">push_back</span>(arr[pl++]);<br>        &#125;<br>        <span class="hljs-keyword">else</span>&#123;<br>            tmp.<span class="hljs-built_in">push_back</span>(arr[pr++]);<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">//下面这两个循环只会执行一个，因为不可能左右子列都有元素剩余</span><br>    <span class="hljs-keyword">while</span>(pl &lt;= mid - <span class="hljs-number">1</span>)&#123;<br>        tmp.<span class="hljs-built_in">push_back</span>(arr[pl++]);<br>    &#125;<br>    <span class="hljs-keyword">while</span>(pr &lt;= right)&#123;<br>        tmp.<span class="hljs-built_in">push_back</span>(arr[pr++]);<br>    &#125;<br>    <span class="hljs-type">int</span> j = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = left; i &lt;= right; i++)&#123;<br>        arr[i] = tmp[j++];<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">mergeSort</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt; &amp;arr, <span class="hljs-type">int</span> left, <span class="hljs-type">int</span> right)</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(left &gt;= right) <span class="hljs-keyword">return</span>;<br>    <span class="hljs-type">int</span> mid = (left + right) / <span class="hljs-number">2</span>;<br>    <span class="hljs-built_in">mergeSort</span>(arr, left, mid - <span class="hljs-number">1</span>);<br>    <span class="hljs-built_in">mergeSort</span>(arr, mid, right);<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;归并排序Merge Sort&lt;/h1&gt;
&lt;p&gt;归并排序个人感觉理解起来没什么难度，主要就是一个递归地合并子序列的过程，直接写代码，在代码特殊的地方说明一下&lt;/p&gt;
&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gu</summary>
      
    
    
    
    <category term="Algorithm" scheme="http://example.com/categories/Algorithm/"/>
    
    <category term="C++" scheme="http://example.com/categories/Algorithm/C/"/>
    
    <category term="job" scheme="http://example.com/categories/Algorithm/C/job/"/>
    
    
    <category term="algorithm" scheme="http://example.com/tags/algorithm/"/>
    
    <category term="sort" scheme="http://example.com/tags/sort/"/>
    
  </entry>
  
  <entry>
    <title>&lt;数据结构/算法&gt; 1.快速排序Quick Sort</title>
    <link href="http://example.com/2024/06/12/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8FQuick%20Sort/"/>
    <id>http://example.com/2024/06/12/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8FQuick%20Sort/</id>
    <published>2024-06-11T23:46:00.000Z</published>
    <updated>2024-06-10T16:32:04.260Z</updated>
    
    <content type="html"><![CDATA[<h1>快速排序Quick Sort</h1><p>事实上对于快速排序一直以来都是懵懵的，苦想后终于茅塞顿开。</p><p>首先，快速排序是一个递归的算法，核心思想是在一个序列中选择一个分界值（Pivot），将该序列中的元素划分为左右两部分，左边的元素均小于分界值，右边的元素大于分界值。然后对左右两边分别递归地执行此操作。</p><p>那么怎样执行这个“分成左右两边”的操作呢？目前最简洁的方法是这样的。</p><ul><li>设立一个快指针fast，一个慢指针slow。快指针用于循环，慢指针用于指向一个位置。</li><li>指向的位置是什么呢？就是下一次遇到比pivot值小的元素时，应该把它填在哪里。</li><li>那么这个位置怎么确定呢，很简单，从序列最左边开始，每找到一个比pivot值小的元素就放到左边，然后往右挪一下就行了。对应到slow指针也就是每次往slow指针位置放，然后slow++。</li><li>那么原来位置上的元素怎么办呢？直接和当前这个快指针指向的元素，也就是那个比pivot值小的元素，互换位置就好了。</li><li>这样做，遍历一遍后，比pivot小的值都往左边不断地堆放，最后全在左边了。剩下的比pivot大的值自然就跑到右边去了。</li><li>但是还有一个pivot值没有处理，这个值往往是选择序列最左边或者最右边的元素，我们在刚刚的遍历中直接略过。也就是如果选了最左边的元素，一开始遍历就直接从第二个元素开始了。如果是最右边的元素，遍历的时候就到倒数第二个元素停止。</li><li>最后剩下的slow元素，很明显是要放到中间的。注意到这个时候slow指针正好就在中间，交换位置即可。这里有两种情况：<ul><li>一种是每次交换后slow再++，也就是下一次放就是直接放到slow的位置。这种情况下遍历结束后的slow应该是指向第一个比pivot大的元素，也就是右边序列的最左端。如果pivot是左端点则需要和slow-1位置互换，这样把slow-1也就是最后一个比pivot小的值换到最前面，如果pivot是右端点则直接和slow互换，这样把第一个比pivot大的值换到最后面。</li><li>第二种是先slow++再交换，这样每一次交换前需要先把slow++挪到下一个位置。这种情况下遍历结束后的slow就是最后一个比pivot小的元素。对于两种pivot位置和第一种情况同理。</li></ul></li></ul><p>以下是C++代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">partition</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt; &amp;arr, <span class="hljs-type">int</span> left, <span class="hljs-type">int</span> right)</span></span>&#123;<br>    <span class="hljs-type">int</span> pivot = arr[right];<br>    <span class="hljs-type">int</span> slow = left;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> fast = left; fast &lt; right; fast++)&#123;<br>        <span class="hljs-keyword">if</span>(arr[fast] &lt; pivot)&#123;<br>            <span class="hljs-type">int</span> tmp = arr[slow];<br>            arr[slow] = arr[fast];<br>            arr[fast] = tmp;<br>            slow++;<br>        &#125;<br>    &#125;<br>    arr[right] = arr[slow];<br>    arr[slow] = pivot;<br>    <span class="hljs-keyword">return</span> slow;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">quickSort</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt; &amp;arr, <span class="hljs-type">int</span> left, <span class="hljs-type">int</span> right)</span></span>&#123;<br>    <span class="hljs-type">int</span> p = <span class="hljs-built_in">partition</span>(arr, left, right);<br>    <span class="hljs-built_in">quickSort</span>(arr, left, p<span class="hljs-number">-1</span>);<br>    <span class="hljs-built_in">quickSort</span>(arr, p+<span class="hljs-number">1</span>, right);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>  vector&lt;<span class="hljs-type">int</span>&gt; arr = &#123;<span class="hljs-number">7</span>, <span class="hljs-number">9</span>, <span class="hljs-number">2</span>, <span class="hljs-number">5</span>, <span class="hljs-number">1</span>&#125;;<br>  <span class="hljs-built_in">quickSort</span>(arr, <span class="hljs-number">0</span>, arr.<span class="hljs-built_in">size</span>() - <span class="hljs-number">1</span>);<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; arr.<span class="hljs-built_in">size</span>(); i++)&#123;<br>    cout &lt;&lt; arr[i] &lt;&lt; <span class="hljs-string">&quot;,&quot;</span>;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>其实就是这么简单的道理，不知道自己以前为什么那么久没搞明白，还是太菜了。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;快速排序Quick Sort&lt;/h1&gt;
&lt;p&gt;事实上对于快速排序一直以来都是懵懵的，苦想后终于茅塞顿开。&lt;/p&gt;
&lt;p&gt;首先，快速排序是一个递归的算法，核心思想是在一个序列中选择一个分界值（Pivot），将该序列中的元素划分为左右两部分，左边的元素均小于分界值，右边的元素</summary>
      
    
    
    
    <category term="Algorithm" scheme="http://example.com/categories/Algorithm/"/>
    
    <category term="C++" scheme="http://example.com/categories/Algorithm/C/"/>
    
    <category term="job" scheme="http://example.com/categories/Algorithm/C/job/"/>
    
    
    <category term="algorithm" scheme="http://example.com/tags/algorithm/"/>
    
    <category term="sort" scheme="http://example.com/tags/sort/"/>
    
  </entry>
  
  <entry>
    <title>C++ STL常用容器及使用方法</title>
    <link href="http://example.com/2024/03/24/CppSTL/"/>
    <id>http://example.com/2024/03/24/CppSTL/</id>
    <published>2024-03-23T23:46:00.000Z</published>
    <updated>2024-03-23T15:47:09.131Z</updated>
    
    <content type="html"><![CDATA[<h1>C++的STL库常用数据结构及方法</h1><h2 id="1-vector可变数组">1. vector可变数组</h2><h3 id="1-1-引入">1.1 引入</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;vector&gt;</span></span><br></code></pre></td></tr></table></figure><h3 id="1-2-创建">1.2 创建</h3><ul><li>创建空vector</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp">vector&lt;<span class="hljs-type">int</span>&gt; vct;<br></code></pre></td></tr></table></figure><ul><li>创建一定长度的vector</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">vct</span><span class="hljs-params">(<span class="hljs-number">10</span>)</span></span>;<br></code></pre></td></tr></table></figure><ul><li>创建一定长度的vector，并且给所有元素赋初始值</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">vct</span><span class="hljs-params">(<span class="hljs-number">10</span>, <span class="hljs-number">1</span>)</span></span>;<br></code></pre></td></tr></table></figure><ul><li>创建一个指定元素值的vector</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp">vector&lt;<span class="hljs-type">int</span>&gt; vct&#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>&#125;;<br></code></pre></td></tr></table></figure><ul><li>使用迭代器创建vector</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp">vector&lt;<span class="hljs-type">int</span>&gt; tmp&#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>&#125;;<br><span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">vct</span><span class="hljs-params">(tmp.begin(), tmp.end())</span></span>;<br></code></pre></td></tr></table></figure><h3 id="1-3-方法">1.3 方法</h3><ul><li><p>向尾部添加元素push_back, emplace_back</p><p>push_back()会先创建一个临时对象，然后复制或移动到容器尾部。emplace_back是C++ 11新引入的方法，直接在容器尾部创建这个对象。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp">vct.<span class="hljs-built_in">push_back</span>(<span class="hljs-number">1</span>);<br>vct.<span class="hljs-built_in">emplace_back</span>(<span class="hljs-number">1</span>);<br></code></pre></td></tr></table></figure></li><li><p>向某一位置插入元素insert，emplace</p><p>同理，emplace是C++ 11新特性</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cpp">vct.<span class="hljs-built_in">insert</span>(pos, val);<span class="hljs-comment">//在pos位置插入元素val</span><br>vct.<span class="hljs-built_in">insert</span>(vct.<span class="hljs-built_in">begin</span>()+<span class="hljs-number">2</span>, <span class="hljs-number">1</span>);<span class="hljs-comment">//在下标为2处插入1</span><br>vct.<span class="hljs-built_in">insert</span>(vct.<span class="hljs-built_in">begin</span>()+<span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">1</span>);<span class="hljs-comment">//在下标为2处插入3个1</span><br></code></pre></td></tr></table></figure></li><li><p>删除尾部元素pop_back</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp">vct.<span class="hljs-built_in">pop_back</span>();<br></code></pre></td></tr></table></figure></li><li><p>删除指定位置的元素erase</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp">vct.<span class="hljs-built_in">erase</span>(vct.<span class="hljs-built_in">begin</span>()+<span class="hljs-number">2</span>);<span class="hljs-comment">//删除下标为2的元素</span><br>vct.<span class="hljs-built_in">erase</span>(vct.<span class="hljs-built_in">begin</span>()+<span class="hljs-number">2</span>, vct.<span class="hljs-built_in">begin</span>()+<span class="hljs-number">5</span>);<span class="hljs-comment">//删除下标为2到4的元素</span><br></code></pre></td></tr></table></figure></li><li><p>清空vector</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf">vct.clear()<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure></li></ul><h2 id="2-stack栈">2. stack栈</h2><h3 id="2-1-引入">2.1 引入</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs <stack">#include&lt;stack&gt;<br></code></pre></td></tr></table></figure><h3 id="2-2-构造stack对象">2.2 构造stack对象</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp">stack&lt;<span class="hljs-type">int</span>&gt; st;<br></code></pre></td></tr></table></figure><h3 id="2-3-方法">2.3 方法</h3><ul><li><p>入栈push</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp">st.<span class="hljs-built_in">push</span>(<span class="hljs-number">1</span>);<br>st.<span class="hljs-built_in">emplace</span>(<span class="hljs-number">1</span>);<br></code></pre></td></tr></table></figure></li><li><p>出栈pop</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp">st.<span class="hljs-built_in">pop</span>();<span class="hljs-comment">//void函数，仅出栈操作</span><br></code></pre></td></tr></table></figure></li><li><p>获取栈顶top</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-type">int</span> a = st.<span class="hljs-built_in">top</span>();<br></code></pre></td></tr></table></figure></li><li><p>判空empty</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">if</span>(!st.<span class="hljs-built_in">empty</span>())&#123;<br>    ...<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h2 id="3-队列queue">3. 队列queue</h2><h3 id="3-1-引入">3.1 引入</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;queue&gt;</span></span><br></code></pre></td></tr></table></figure><h3 id="3-2-构造queue对象">3.2 构造queue对象</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp">queue&lt;<span class="hljs-type">int</span>&gt; q;<br></code></pre></td></tr></table></figure><h3 id="3-3-方法">3.3 方法</h3><ul><li><p>入队push，emplace</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs abnf">q.push(<span class="hljs-number">1</span>)<span class="hljs-comment">;</span><br>q.emplace(<span class="hljs-number">1</span>)<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure></li><li><p>出队pop</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp">q.<span class="hljs-built_in">pop</span>();<br></code></pre></td></tr></table></figure></li><li><p>获取队头、队尾元素front，back</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-type">int</span> a = q.<span class="hljs-built_in">front</span>();<br>a = q.<span class="hljs-built_in">back</span>();<br></code></pre></td></tr></table></figure></li></ul><h2 id="4-双向队列deque">4. 双向队列deque</h2><h3 id="4-1-引入">4.1 引入</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;deque&gt;</span></span><br></code></pre></td></tr></table></figure><h3 id="4-2-构造deque对象">4.2 构造deque对象</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp">deque&lt;<span class="hljs-type">int</span>&gt; dq;<br><span class="hljs-function">deque&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">dq</span><span class="hljs-params">(len, val)</span></span>;<br></code></pre></td></tr></table></figure><h3 id="4-3-方法">4.3 方法</h3><ul><li><p>前端插入元素push_front，emplace_front</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp">dq.<span class="hljs-built_in">push_front</span>(<span class="hljs-number">1</span>);<br>dq.<span class="hljs-built_in">emplace_front</span>(<span class="hljs-number">1</span>);<br></code></pre></td></tr></table></figure></li><li><p>后端插入元素push_back，emplace_back</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp">dq.<span class="hljs-built_in">push_back</span>(<span class="hljs-number">1</span>);<br>dq.<span class="hljs-built_in">emplace_back</span>(<span class="hljs-number">1</span>);<br></code></pre></td></tr></table></figure></li><li><p>前后端出队pop_front，pop_back</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp">dq.<span class="hljs-built_in">pop_front</span>();<br>dq.<span class="hljs-built_in">pop_back</span>();<br></code></pre></td></tr></table></figure></li><li><p>访问元素front，back</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-type">int</span> a = dq.<span class="hljs-built_in">front</span>();<br><span class="hljs-type">int</span> b = dq.<span class="hljs-built_in">back</span>();<br></code></pre></td></tr></table></figure></li><li><p>清空clear</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp">dq.<span class="hljs-built_in">clear</span>();<br></code></pre></td></tr></table></figure></li></ul><h2 id="5-集合set">5. 集合set</h2><h3 id="5-1-引入">5.1 引入</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;set&gt;</span></span><br></code></pre></td></tr></table></figure><h3 id="5-2-构造set">5.2 构造set</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp">set&lt;<span class="hljs-type">int</span>&gt; s;<br></code></pre></td></tr></table></figure><h3 id="5-3-方法">5.3 方法</h3><ul><li><p>插入元素insert，emplace</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp">s.<span class="hljs-built_in">insert</span>(<span class="hljs-number">1</span>);<br>s.<span class="hljs-built_in">emplace</span>(<span class="hljs-number">1</span>);<br></code></pre></td></tr></table></figure></li><li><p>删除元素erase</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp">s.<span class="hljs-built_in">erase</span>(<span class="hljs-number">1</span>);<span class="hljs-comment">//删除值为1的元素</span><br></code></pre></td></tr></table></figure></li><li><p>查找元素count，find</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">if</span>(s.<span class="hljs-built_in">count</span>(<span class="hljs-number">1</span>))&#123;<span class="hljs-comment">//若存在则返回1，否则返回0</span><br>    ...<br>&#125;<br><span class="hljs-keyword">if</span>(s.<span class="hljs-built_in">find</span>(<span class="hljs-number">1</span>) != s.<span class="hljs-built_in">end</span>())&#123;<span class="hljs-comment">//若存在则返回迭代器，否则返回end()</span><br>    ...<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>清空clear</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp">s.<span class="hljs-built_in">clear</span>();<br></code></pre></td></tr></table></figure></li></ul><h2 id="6-键值映射map">6. 键值映射map</h2><h3 id="6-1-引入">6.1 引入</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;map&gt;</span></span><br></code></pre></td></tr></table></figure><h3 id="6-2-构造">6.2 构造</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp">map&lt;<span class="hljs-type">char</span>, <span class="hljs-type">int</span>&gt; mp;<br></code></pre></td></tr></table></figure><h3 id="6-3-方法">6.3 方法</h3><ul><li><p>插入元素insert, emplace</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp">mp.<span class="hljs-built_in">insert</span>(<span class="hljs-built_in">pair</span>&lt;<span class="hljs-type">char</span>, <span class="hljs-type">int</span>&gt;(<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-number">1</span>));<br>mp.<span class="hljs-built_in">emplace</span>(<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-number">1</span>);<br></code></pre></td></tr></table></figure></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;C++的STL库常用数据结构及方法&lt;/h1&gt;
&lt;h2 id=&quot;1-vector可变数组&quot;&gt;1. vector可变数组&lt;/h2&gt;
&lt;h3 id=&quot;1-1-引入&quot;&gt;1.1 引入&lt;/h3&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td</summary>
      
    
    
    
    <category term="Programming Language" scheme="http://example.com/categories/Programming-Language/"/>
    
    <category term="C++" scheme="http://example.com/categories/Programming-Language/C/"/>
    
    
    <category term="C++" scheme="http://example.com/tags/C/"/>
    
    <category term="STL" scheme="http://example.com/tags/STL/"/>
    
  </entry>
  
  <entry>
    <title>SpotServe, Serving Generative Large Language Models on Preemptible Instances</title>
    <link href="http://example.com/2024/02/03/SpotServe/"/>
    <id>http://example.com/2024/02/03/SpotServe/</id>
    <published>2024-02-02T18:15:00.000Z</published>
    <updated>2024-02-01T18:54:29.021Z</updated>
    
    <content type="html"><![CDATA[<h1><strong>SpotServe: Serving Generative Large Language Models on Preemptible Instances</strong></h1><p>Author: Xupeng Miao, et al.</p><h2 id="Background">Background</h2><h3 id="Generative-LLM">Generative LLM</h3><p><img src="https://lh7-us.googleusercontent.com/__jCtoUnwYaYZ8vWKlfn_-PsE6uQZ41sjjkrQ0it5gVYu5o9_R3DIciYp3GgOunsNsa0Pz5mRqJvuHHwhRx1t64AdmjazFVge6AqVtAC8WouPtAj0S71vs6tbg5f4DaEFC0ndDRucqVq4Ngwt98sAwF3DQ=s2048" alt="img"></p><ul><li><p>Input: tokens;</p></li><li><p>Output: token sequence</p></li><li><p>Stops when: output reaches maximum length/ending token <EOT></EOT></p></li></ul><h3 id="Two-types-of-GPU-Instances">Two types of GPU Instances</h3><ul><li><p>On-demand GPUs:</p><ul><li><strong>Expensive</strong></li><li>Use anytime you need</li></ul></li><li><p>Preemptible GPU Instances (e.g. Spot Instances):</p><ul><li><strong>Cheap (run on spare capacity)</strong></li><li>Might be Preempted anytime</li><li>Offers a grace period after preemption to complete currently running tasks</li></ul><p><img src="https://lh7-us.googleusercontent.com/DkwxhSsXc0N0WC81IuCqRq9LXtl9aXjPPiM8yei1CeiuHp_jHZOZWvidvJrN-hygJVM_vc9wGKiqVlTVJiv5vhHzOCEXUKpK20txDLNUNcxoz3nKE0O7KDXFiAfXOU85Qax8Nsg1q_sOIDuHFZ148YG1IQ=s2048" alt="img"></p></li></ul><h2 id="Challenges">Challenges</h2><ul><li><p>The number of available preemptible instances changes frequently <strong>=&gt;</strong> <strong>Dynamic reparallelization</strong> for optimized serving performance</p></li><li><p>Restarting LLM results in great overhead of reloading parameters <strong>=&gt;</strong> Find the <strong>optimal migration strategy</strong> that minimize the cost</p></li><li><p>Grace periods may not be long enough for finishing current request</p></li><li><p>The reduction of throughput during this process might lead to accumulation of subsequent requests</p></li></ul><h2 id="SpotServe">SpotServe</h2><h3 id="Overview">Overview</h3><p><img src="https://lh7-us.googleusercontent.com/XZZe4AHfMJmr_CeXTrBMCnfXwgQzDLcx_JWctJd7FrUSSlvNvBLlWeiNsg_rdVoFw-qOODUKmDPkdLP5tIQ-aTJgIwW095JejoCQ2C422osBni5AsSlbR1bBp0M0x0ZSIjhAlCKAZYzGHrAUS4few2Fzpw=s2048" alt="img"></p><ul><li>Request Manager: handle requests, partition into batches, assign them to instances, send output to users</li><li>Instance server: monitor the preemption and acquisition of instances</li><li>Meta-context manager: schedule the context migration between GPU instances (parameters, outputs, etc.)</li></ul><h3 id="Meta-context-Manager">Meta-context Manager</h3><h4 id="Parallelization-Controller">Parallelization Controller</h4><h5 id="Parallelization-Configurations">Parallelization Configurations:</h5><ul><li><strong>D</strong>: Data Parallelization: partition requests and assign them to different pipelines</li><li><strong>P</strong>: Pipeline model parallelization: run different stages of a inference process simultaneously (like pipeline in CPU)</li><li><strong>M</strong>: Tensor model parallelization: split the model into shards and assign to different GPUsParallel</li><li>Configuration <strong>C</strong> = (D, P, M)</li></ul><p><img src="https://lh7-us.googleusercontent.com/vyC2ivtUjb6jx-4a44Fb-CCILGpqTHIEZMD-sRazYRNajDIa6vzZqFXZHArPoHxWMf5MCoAV3lVPlg2r4O3YBeunuAMUd0tM3K6b-MYiMbfvqvoyXCeVAB_1UdUjL5LFmbTta3KVMqO1xVF8CMCfSj4M0w=s2048" alt="img"></p><p><img src="https://lh7-us.googleusercontent.com/UgHiPq-iqfUTUlfZ_eKKxCdAKfGLZ35NR8BfY9Fysni41dIrpP4mwr2jlxwCZq5_W2W-pTUv4ptNxZ0NTF5lYBbXBIXXdNyrzF5aTfRP-tRd5i6uhKirSBcDYuvl4LGq_TBrEBgU7TpoczmxQTtrBP4weQ=s2048" alt="img"></p><h5 id="Configuration-Optimizer">Configuration Optimizer</h5><p><img src="https://lh7-us.googleusercontent.com/vzMkndwQq5s5d6cRu5F28hXBWyoeNyr7_5-GZZgR-MG9ntKYYiWoiZLk5JWeBT99xYLULeWop0OObtPAduL5HGPQ2pO0gCz7dqPS3SGl3M0DXXOzbzIbShbMAlZMrdbLLGDV5HoI0EMUM75r5OLS5u0BCw=s2048" alt="img"></p><p><strong>If</strong> there is a configuration such that the throughput is larger than the request arrival rate, <strong>then</strong> choose the configuration that has minimum inference latency while making sure the throughput is larger than arrival rate. <strong>Otherwise</strong>, find the C for maximum throughput.</p><p><strong>After</strong> adjusting the configuration, allocate or free instances.</p><p>Offline process =&gt; low latency</p><p><strong>What do we have now?</strong></p><ul><li>We now have a configuration for the next step.</li><li>However, we only decided the parallelization structure.</li><li>How should us decide how to map the physical instances to logical positions?</li></ul><h4 id="Device-Mapper"><strong>Device Mapper</strong></h4><ul><li><strong>Goal</strong>: find the matching strategy that maximize reusable context (i.e., edge weight sum)</li></ul><p><img src="https://lh7-us.googleusercontent.com/uIwqLoTUUz66a9PkQfiKllRlJP7g_mo73tNQUaVjOgzxk2FGEubdwFaqxXFLd-CJTUpHL-xhb7aZgu2RdAtBXWbS-1_l_RPJRRJwtD8xm5-b1d_sXZGh0ZbjowZCw59DEeYrJeWKPAxD65Z8Hl4A6kYy_A=s2048" alt="img"></p><ul><li><strong>Approach</strong>: *KM (*<em>Kuhn-Munkres) Algorithm</em> for Bipartite Graph Maximum Weight Matching</li></ul><p><img src="/.com//D:%5Cdingblog%5Csource%5Cimg%5Cspotserve%5Cbigraph.png" alt></p><p>edges: e(u, v) indicates reusable parameters and caches when mapping GPU u to position v.</p><h4 id="Migration-Planner"><strong>Migration Planner</strong></h4><p><img src="https://lh7-us.googleusercontent.com/yUY4QY3JBuc3frOpU9igRxgFR7OXxeromn776cGPdnrL47ib7u-Ixyp4WK22dylnd_ehyGMxLcHoikY0isDt18P4eeiCbd2sNgwIxJj3LJfo8dnhQQZwF6fTUidE8uEnhKw0Aspop76el-NK5_jqDSmHZQ=s2048" alt="img"></p><ol><li>From front layers (0, 1) to back layers (N), find the layers whose context do not exceed the buffer size and prioritize migration of these layers.</li><li>For other layers, add them to the sequence by the order of instance buffer memory usage</li><li>After we have the sequence, sequentially migrate the layers in this sequence. If all layers of a specific stage is migrated, start running this stage.</li></ol><h3 id="Just-in-time-Arrangement">Just-in-time Arrangement</h3><p>What should we do if we receive a preemption/acquisition notification while there are still requests running/waiting?</p><ul><li>Immediately suspend and migrate? =&gt; high inference latency</li><li>Finish all requests? =&gt; no enough time for migration</li><li><strong>SpotServe</strong>: for preemption, maximize token generation (since migration happens during the grace period); for acquisition, minimize token generation when exploiting the whole grace period (since migration happens after the grace period)</li></ul><h2 id="Experimental-Evaluation">Experimental Evaluation</h2><h3 id="Comparison">Comparison</h3><ul><li><p>Stable workload</p></li><li><p>P99: latency at the 99th percentage (99% latency &lt;= this value)</p></li><li><p>Baselines: FasterTransformer (reparallelization but no cocntext migration, rerouting with pre-defined config)</p><p><img src="https://lh7-us.googleusercontent.com/8wenNdhNJT1VmN05N0gxrNKqk8qT9xCcZa3uZPePmr35xKSSD1U570V3iEtrlei8-zknw3xUJ4sytACMj_iX-t4Q04UHQyTt6tYhYdXreqnYWplghxE_KIWClBYdpqLAyr5ezVns4JNFY-MY1sQ1efa9zw=s2048" alt="img"></p></li><li><p>Fluctuating Workload</p><p><img src="https://lh7-us.googleusercontent.com/bpEki4DA2MEqzMuhU1nxpj5XOjf6AsjtdWnMpA7DN8GdnbcQd5wVhbgjc6WDs8mFIWf75OlkEMxxBDJ_GAMFwfaL5_imDBvvXSgHAM3jSFm9yIx8n6qqT7F-M2tRLfhvQO3mxoAxPV_3N2msXSgp2ik-Xw=s2048" alt="img"></p></li></ul><h3 id="Ablation">Ablation</h3><p><img src="https://lh7-us.googleusercontent.com/dpK-WvVOgT4EO9BgpTm3HpxJu1DS_IzSShStV--RNiDmU9RROzZobzd9yWV1HvPpaJ0d-dqn5zp1nXjWn1nbctUI-H46em5TNu3Bz5WdQBKqOrVV_HcIqzoqDdxZkU2A3QGr1cK9LrETho7MrDXPRqKeHg=s2048" alt="img"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;&lt;strong&gt;SpotServe: Serving Generative Large Language Models on Preemptible Instances&lt;/strong&gt;&lt;/h1&gt;
&lt;p&gt;Author: Xupeng Miao, et al.&lt;/p&gt;
&lt;h</summary>
      
    
    
    
    <category term="mlsys" scheme="http://example.com/categories/mlsys/"/>
    
    
    <category term="mlsys" scheme="http://example.com/tags/mlsys/"/>
    
    <category term="distributed system" scheme="http://example.com/tags/distributed-system/"/>
    
  </entry>
  
</feed>
