<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>&lt;数据结构/算法&gt; leetcode hot100系列. 239.滑动窗口最大值</title>
    <link href="/2024/07/29/lc_239_%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3%E6%9C%80%E5%A4%A7%E5%80%BC/"/>
    <url>/2024/07/29/lc_239_%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3%E6%9C%80%E5%A4%A7%E5%80%BC/</url>
    
    <content type="html"><![CDATA[<h1>[LeetCode hot 100] 239. 滑动窗口最大值</h1><p><a href="https://leetcode.cn/problems/sliding-window-maximum/description/?envType=study-plan-v2&amp;envId=top-100-liked">题目链接</a></p><p>非常有趣的一道题。我们首先思考一下，每次窗口移动可能会发生什么事。</p><ol><li>假如移出去的那个数不是之前窗口的最大值，那没问题，直接丢掉就可以。</li><li>假如移出去的恰好就是窗口的最大值，那么把它移走了，新王登基，怎样又快又准地去找这个新王是谁呢？</li></ol><p>我们来看第一种情况，如果这个数不是最大值，说明后面一定存在一个数比它更大。当窗口移动时，由于这个数在前面，所以先被卡掉，但是因为后面还有更大的，所以卡掉它对于窗口的最大值不起任何影响。因此这种数对于结果起不到任何的改变，是窗口中的小透明，我们不需要管它们。</p><p>那么剩下的另一种数就是窗口的后面没有比它大的了，这种才是我们需要考虑的，因为它们是真正关乎到滑动窗口最大值的数。</p><p>我们要记录所有的这种数，这样的单调序列再加上滑动窗口这种每次后面进来一个数，前面出来一个数的结构，非常适合使用单调队列来记录。单调队列中，元素从队头到队尾递减，每次后移一位，就对比新的数和队尾，如果队尾比新数小，就说明队尾是小透明，出队扔掉，再比较新的队尾，也就是本来在队尾的前一位，比队尾大一点，如此循环直到队尾不比新数小，也就是踢到了钢板。这时将新数入队。</p><p>同时，移动窗口会导致原来窗口中的第一位被卡掉，这时如果被卡掉的正好是队头，那说明它恰好是最大的那个，就需要从队头把它出队。（由于可能有重复值，因此队列中需要存储下标，通过下标进行比对）</p><p>每个窗口中最大的元素一定就是当前的队头。</p><p>综合以上，完整代码如下</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">maxSlidingWindow</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums, <span class="hljs-type">int</span> k)</span> </span>&#123;<br>        deque&lt;<span class="hljs-type">int</span>&gt; dq;<br>        <span class="hljs-type">int</span> left = <span class="hljs-number">0</span>;<br>        vector&lt;<span class="hljs-type">int</span>&gt; ans;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; nums.<span class="hljs-built_in">size</span>() - k + <span class="hljs-number">1</span>; i++)&#123;<br>            <span class="hljs-keyword">if</span>(i == <span class="hljs-number">0</span>)&#123;<br>                <span class="hljs-comment">//首先建立第一个窗口的优先队列，后续的优先队列都在此基础上调整</span><br>                <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; k; j++)&#123;<br>                    cout&lt;&lt;j&lt;&lt;endl;<br>                    <span class="hljs-keyword">if</span>(dq.<span class="hljs-built_in">empty</span>() || nums[dq.<span class="hljs-built_in">back</span>()] &gt;= nums[j])&#123;<br>                        dq.<span class="hljs-built_in">push_back</span>(j);<br>                    &#125; <span class="hljs-keyword">else</span>&#123;<br>                        <span class="hljs-keyword">while</span>(!dq.<span class="hljs-built_in">empty</span>() &amp;&amp; nums[dq.<span class="hljs-built_in">back</span>()] &lt; nums[j])&#123;<br>                            dq.<span class="hljs-built_in">pop_back</span>();<br>                        &#125;<br>                        dq.<span class="hljs-built_in">push_back</span>(j);<br>                    &#125;<br>                &#125;<br>                ans.<span class="hljs-built_in">push_back</span>(nums[dq.<span class="hljs-built_in">front</span>()]);<br>            &#125; <span class="hljs-keyword">else</span>&#123;<br>                <span class="hljs-keyword">if</span>(!dq.<span class="hljs-built_in">empty</span>() &amp;&amp; dq.<span class="hljs-built_in">front</span>() == i - <span class="hljs-number">1</span>)&#123;<br>                    dq.<span class="hljs-built_in">pop_front</span>();<br>                &#125;<br>                <span class="hljs-keyword">if</span>(dq.<span class="hljs-built_in">empty</span>() || nums[dq.<span class="hljs-built_in">back</span>()] &gt;= nums[i+k<span class="hljs-number">-1</span>])&#123;<br>                    dq.<span class="hljs-built_in">push_back</span>(i+k<span class="hljs-number">-1</span>);<br>                &#125; <span class="hljs-keyword">else</span>&#123;<br>                    <span class="hljs-keyword">while</span>(!dq.<span class="hljs-built_in">empty</span>() &amp;&amp; nums[dq.<span class="hljs-built_in">back</span>()] &lt; nums[i+k<span class="hljs-number">-1</span>])&#123;<br>                        dq.<span class="hljs-built_in">pop_back</span>();<br>                    &#125;<br>                    dq.<span class="hljs-built_in">push_back</span>(i+k<span class="hljs-number">-1</span>);<br>                &#125;<br>                ans.<span class="hljs-built_in">push_back</span>(nums[dq.<span class="hljs-built_in">front</span>()]);<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> ans;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Algorithm</category>
      
      <category>C++</category>
      
      <category>job</category>
      
    </categories>
    
    
    <tags>
      
      <tag>algorithm</tag>
      
      <tag>slide-window</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>&lt;数据结构/算法&gt; leetcode hot100系列. 110.盛水最多的容器</title>
    <link href="/2024/07/25/lc_110_%E7%9B%9B%E6%B0%B4%E6%9C%80%E5%A4%9A%E7%9A%84%E5%AE%B9%E5%99%A8/"/>
    <url>/2024/07/25/lc_110_%E7%9B%9B%E6%B0%B4%E6%9C%80%E5%A4%9A%E7%9A%84%E5%AE%B9%E5%99%A8/</url>
    
    <content type="html"><![CDATA[<h1>[LeetCode hot 100] 110. 盛水最多的容器</h1><p><a href="https://leetcode.cn/problems/container-with-most-water/description/?envType=study-plan-v2&amp;envId=top-100-liked">题目链接</a></p><p>最烦这种题，因为每次都感觉自己那么接近答案，就是做不出来，像个傻子一样。</p><p>怎样思考这个问题？首先我们从左往右看一看，假如有两根柱子，左边的柱子比右边的高，那么当选取这两个柱子之一作为左边的容器壁时，右边的柱子是一定会输的。</p><p>考虑数组的左右两个端点，假如左边的柱子更矮，那么右边的柱子无论再怎么高也没有用，这就是所谓的木桶效应。所以事实上以最左侧柱子为左端点的容器都不需要看了，因为不会有比现在更大的了。这也就是说，最左侧的柱子被“pass”了。</p><p>那么接下来就算一下这个容器的容量，然后把最左侧的柱子扔了，换第二个，也就是left指针右移。对于新的左右端点，运用同样的思路，排掉较短的那一根，如此循环直到左右端点相遇。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">maxArea</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; height)</span> </span>&#123;<br>        <span class="hljs-type">int</span> left = <span class="hljs-number">0</span>, right = height.<span class="hljs-built_in">size</span>() - <span class="hljs-number">1</span>;<br>        <span class="hljs-type">int</span> maxVolume = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span>(left &lt; right)&#123;<br>            <span class="hljs-type">int</span> curVolume = (right - left) * <span class="hljs-built_in">min</span>(height[left], height[right]);<br>            maxVolume = <span class="hljs-built_in">max</span>(maxVolume, curVolume);<br>            <span class="hljs-keyword">if</span>(height[left] &gt;= height[right])&#123;<br>                right--;<br>            &#125; <span class="hljs-keyword">else</span>&#123;<br>                left++;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> maxVolume;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Algorithm</category>
      
      <category>C++</category>
      
      <category>job</category>
      
    </categories>
    
    
    <tags>
      
      <tag>algorithm</tag>
      
      <tag>two-pointers</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>&lt;数据结构/算法&gt; leetcode hot100系列. 22.括号生成Generate Parenthesis</title>
    <link href="/2024/07/25/lc_128_%E6%9C%80%E9%95%BF%E8%BF%9E%E7%BB%AD%E5%BA%8F%E5%88%97/"/>
    <url>/2024/07/25/lc_128_%E6%9C%80%E9%95%BF%E8%BF%9E%E7%BB%AD%E5%BA%8F%E5%88%97/</url>
    
    <content type="html"><![CDATA[<h1>[LeetCode hot 100] 128. 最长连续序列</h1><p><a href="https://leetcode.cn/problems/longest-consecutive-sequence/?envType=study-plan-v2&amp;envId=top-100-liked">题目链接</a></p><p>遇到这种题，首先想一想，作为一个人类，我们怎么思考这个问题。我们肯定是每看到一个数就去整个序列里面找有没有挨着的，如果有，那就顺着继续找，最后一个数一个数地摘出来，算一个长度对吗？</p><p>简化这个过程，我们不需要每个数都找，而是只需要从一个连续序列开头的那个数往后找就行。</p><ol><li>首先先遍历一下这个数组，并且放入集合中，一来是去重，二来是方便后面的查找。</li><li>遍历这个集合，对于每个元素e，如果集合中存在比它小1的元素e-1，那就先不管这个数，因为肯定不是一个连续序列的开头。</li><li>如果集合中不存在e-1，就说明e一定是一个连续序列的开头，那么就开始找e+1, e+2, …, e+n，直到e+n找不到了，说明序列到此结束，当前序列的长度就是n。</li><li>最后遍历完之后输出序列长度的最大值就行。</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">longestConsecutive</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums)</span> </span>&#123;<br>        set&lt;<span class="hljs-type">int</span>&gt; numSet;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span>&amp; num : nums)&#123;<br>            numSet.<span class="hljs-built_in">emplace</span>(num);<br>        &#125;<br>        <span class="hljs-type">int</span> maxLength = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span>&amp; num : numSet)&#123;<br>            <span class="hljs-keyword">if</span>(numSet.<span class="hljs-built_in">count</span>(num<span class="hljs-number">-1</span>))<br>                <span class="hljs-keyword">continue</span>;<br>            <span class="hljs-type">int</span> len = <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">while</span>(numSet.<span class="hljs-built_in">count</span>(num+len))&#123;<br>                len++;<br>            &#125;<br>            maxLength = <span class="hljs-built_in">max</span>(maxLength, len);<br>        &#125;<br>        <span class="hljs-keyword">return</span> maxLength;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Algorithm</category>
      
      <category>C++</category>
      
      <category>job</category>
      
    </categories>
    
    
    <tags>
      
      <tag>algorithm</tag>
      
      <tag>hash</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>&lt;数据结构/算法&gt; leetcode hot100系列. 22.括号生成Generate Parenthesis</title>
    <link href="/2024/07/25/lc_49_%E5%AD%97%E6%AF%8D%E5%BC%82%E4%BD%8D%E8%AF%8D%E5%88%86%E7%BB%84/"/>
    <url>/2024/07/25/lc_49_%E5%AD%97%E6%AF%8D%E5%BC%82%E4%BD%8D%E8%AF%8D%E5%88%86%E7%BB%84/</url>
    
    <content type="html"><![CDATA[<h1>[LeetCode hot 100] 49. 字母异位词分组</h1><p><a href="https://leetcode.cn/problems/group-anagrams/solutions/520469/zi-mu-yi-wei-ci-fen-zu-by-leetcode-solut-gyoc/?envType=study-plan-v2&amp;envId=top-100-liked">题目链接</a></p><p>这道题比较直觉的做法就是先对每个词排序，因为不同异位词按照字母排序之后的异位词就是统一的了，因此将这个排序后的词作为map的键，查找map时如果存在这个键，就按照map中记录的位置去找这个键对应的异位词分组在返回结果中的位置，并且在这个异位词分组后面加上当前字符串。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    vector&lt;vector&lt;string&gt;&gt; <span class="hljs-built_in">groupAnagrams</span>(vector&lt;string&gt;&amp; strs) &#123;<br>        vector&lt;vector&lt;string&gt;&gt; ans;<br>        map&lt;string, <span class="hljs-type">int</span>&gt; posMap;<br>        <span class="hljs-type">int</span> pos = <span class="hljs-number">0</span>;<span class="hljs-comment">//分组的下一个下标</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span>&amp; str : strs)&#123;<br>            string cur = str;<br>            <span class="hljs-built_in">sort</span>(cur.<span class="hljs-built_in">begin</span>(), cur.<span class="hljs-built_in">end</span>());<br>            <span class="hljs-keyword">if</span>(posMap.<span class="hljs-built_in">find</span>(cur) == posMap.<span class="hljs-built_in">end</span>())&#123;<br>                posMap.<span class="hljs-built_in">emplace</span>(cur, pos);<br>                vector&lt;string&gt; anagramList;<br>                anagramList.<span class="hljs-built_in">push_back</span>(str);<br>                ans.<span class="hljs-built_in">push_back</span>(anagramList);<br>                pos++;<br>            &#125; <span class="hljs-keyword">else</span>&#123;<br>                <span class="hljs-type">int</span> curPos = posMap.<span class="hljs-built_in">find</span>(cur)-&gt;second;<br>                ans[curPos].<span class="hljs-built_in">push_back</span>(str);<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> ans;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Algorithm</category>
      
      <category>C++</category>
      
      <category>job</category>
      
    </categories>
    
    
    <tags>
      
      <tag>algorithm</tag>
      
      <tag>hash</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2024/07/05/%E4%BD%BF%E7%94%A8vue%E5%92%8Celementui%E9%81%87%E5%88%B0%E7%9A%84%E5%90%84%E7%A7%8D%E5%9D%91/"/>
    <url>/2024/07/05/%E4%BD%BF%E7%94%A8vue%E5%92%8Celementui%E9%81%87%E5%88%B0%E7%9A%84%E5%90%84%E7%A7%8D%E5%9D%91/</url>
    
    <content type="html"><![CDATA[<h1>使用vue和elementui遇到的各种坑</h1><h3 id="正则表达式报错">正则表达式报错</h3><p>一般是因为其中的反斜杠解析错误，在后面加上</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span> eslint-disable-line<br></code></pre></td></tr></table></figure><p>这个注释就好</p><h3 id="el-form几种表单验证方式">el-form几种表单验证方式</h3><p><a href="https://blog.csdn.net/weixin_45046532/article/details/137624361">https://blog.csdn.net/weixin_45046532/article/details/137624361</a></p><h3 id="常用表单域验证正则匹配">常用表单域验证正则匹配</h3><p><a href="https://blog.csdn.net/2401_84092423/article/details/137700320">https://blog.csdn.net/2401_84092423/article/details/137700320</a></p><h3 id="嵌套el-form-item">嵌套el-form-item</h3><p><a href="https://blog.csdn.net/weixin_69670563/article/details/135880729">https://blog.csdn.net/weixin_69670563/article/details/135880729</a></p><h3 id="el-form里出现一个item包含多个输入，怎样进行表单域验证？">el-form里出现一个item包含多个输入，怎样进行表单域验证？</h3><h3 id="邮箱验证">邮箱验证</h3><figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs taggerscript">/^<span class="hljs-symbol">\\</span>s*<span class="hljs-symbol">\\</span>w+(?:<span class="hljs-symbol">\\</span>.&#123;0,1&#125;[<span class="hljs-symbol">\\</span>w-]+)*@[a-zA-Z0-9]+(?:[-.][a-zA-Z0-9]+)*<span class="hljs-symbol">\\</span>.[a-zA-Z]+<span class="hljs-symbol">\\</span>s*$/<br></code></pre></td></tr></table></figure><p>/^\s*\w+(?:\.{0,1}[\w-]+)<em>@[a-zA-Z0-9]+(?:[-.][a-zA-Z0-9]+)</em>\.[a-zA-Z]+\s*$/</p><p>87558353</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>&lt;数据结构/算法&gt; 我一定要学会【堆】-第k大</title>
    <link href="/2024/06/20/%E6%88%91%E4%B8%80%E5%AE%9A%E8%A6%81%E5%AD%A6%E4%BC%9A%E3%80%90%E5%A0%86%E3%80%91/"/>
    <url>/2024/06/20/%E6%88%91%E4%B8%80%E5%AE%9A%E8%A6%81%E5%AD%A6%E4%BC%9A%E3%80%90%E5%A0%86%E3%80%91/</url>
    
    <content type="html"><![CDATA[<h1>我一定要学会【堆】</h1><p>气死了，每次写关于堆的算法都要重新复习一遍，今天一定要搞清楚。</p><h3 id="什么是堆">什么是堆</h3><p>堆是一种数据结构，其中的数据以完全二叉树的逻辑组织，但是存储数据的结构使用的是数组。也就是说，要用数组表示一个树的结构。堆分为两种：</p><ul><li>大根堆：树中任何一个节点大于或等于他的两个孩子节点。</li><li>小根堆：与大根堆相反。</li></ul><p>我们这里以大根堆为例。</p><p>堆在数组中存放的顺序是层序，也就是说先存第一层，再存第二层，……由于堆是完全二叉树，所以在数组中存放时，每个节点与其左右孩子节点的位置关系都是可以确定的。</p><ul><li>父节点位置：k</li><li>左孩子位置：2k+1</li><li>右孩子位置：2k+2</li></ul><h3 id="堆的调整">堆的调整</h3><p>由于堆的结构特殊性，所以先要了解堆的调整策略。堆的调整是将不符合堆的结构调整成符合堆的数据结构，分为向上调整和向下调整。</p><h4 id="向上调整">向上调整</h4><p>向上调整又叫上浮，发生在堆底（也就是末尾）插入新元素的时候，这时要把插入的元素调整到正确的位置，具体做法是确定父节点的位置，与之比较，如果比父节点大就和父节点交换，直到比父节点小，被管住了，就老实呆在那里了。代码如下</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">adjustUp</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; heap, <span class="hljs-type">int</span> child)</span></span>&#123;<br>    <span class="hljs-type">int</span> parent = (child - <span class="hljs-number">1</span>) / <span class="hljs-number">2</span>;<br>    <span class="hljs-keyword">while</span>(parent &gt;= <span class="hljs-number">0</span> &amp;&amp; heap[child] &gt; heap[parent])&#123;<br>        <span class="hljs-type">int</span> tmp = heap[parent];<br>        heap[parent] = heap[child];<br>        heap[child] = tmp;<br>        child = parent;<br>        parent = (child - <span class="hljs-number">1</span>) / <span class="hljs-number">2</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="向下调整">向下调整</h4><p>向下调整又叫下沉，发生在堆顶元素改变时。此时需要堆顶元素与两个孩子比较，假如父节点元素不是最大的，说明父节点管不住孩子了，需要将其中最大的孩子扶持为新的堆顶，如此循环直到父节点比他的两个孩子都大。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">adjustDown</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; heap, <span class="hljs-type">int</span> parent)</span></span>&#123;<br>    <span class="hljs-type">int</span> lchild = <span class="hljs-number">2</span> * parent + <span class="hljs-number">1</span>;<br>    <span class="hljs-type">int</span> rchild = lchild + <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span>(lchild &lt; heap.<span class="hljs-built_in">size</span>())&#123;<br>        <span class="hljs-type">int</span> largest = lchild;<br>        <br>        <span class="hljs-keyword">if</span>(rchild &gt;= heap.<span class="hljs-built_in">size</span>() || heap[lchild] &gt; heap[rchild])<br>            largest = rchild;<br>        <br>        <span class="hljs-keyword">if</span>(heap[parent] &gt; heap[largest])<br>            <span class="hljs-keyword">break</span>;<br>        <br>        <span class="hljs-type">int</span> tmp = heap[parent];<br>        heap[parent] = heap[largest];<br>        heap[largest] = tmp;<br>        <br>        parent = largest;<br>        lchild = <span class="hljs-number">2</span> * parent + <span class="hljs-number">1</span>;<br>        rchild = <span class="hljs-number">2</span> * parent + <span class="hljs-number">2</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="插入元素">插入元素</h3><p>现在有了两种调整堆的方法，很容易就能插入元素。把元素放到堆底并向上调整就行。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">heapInsert</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; heap, <span class="hljs-type">int</span> val)</span></span>&#123;<br>    heap.<span class="hljs-built_in">push_back</span>(val);<br>    <span class="hljs-built_in">adjustUp</span>(heap, heap.<span class="hljs-built_in">size</span>() - <span class="hljs-number">1</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="堆的创建">堆的创建</h3><p>那创建堆不就是一个一个元素往堆里面插入吗？</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">buildHeap</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; heap, vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums)</span></span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; nums.<span class="hljs-built_in">size</span>(); i++)&#123;<br>        <span class="hljs-built_in">heapInsert</span>(heap, nums[i]);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>但是</strong>这样其实多做了很多无意义的操作，事实上，只要从孩子一步一步往父节点调整就够了，调整次数为logn，即：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">buildHeap</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums)</span></span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = (nums.<span class="hljs-built_in">size</span>() - <span class="hljs-number">1</span>) / <span class="hljs-number">2</span>; i &gt;= <span class="hljs-number">0</span>; i--)&#123;<br>        <span class="hljs-built_in">adjustDown</span>(nums, i);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>太神奇了，这甚至是在原数组上就进行了，相当于对于倒数第二层的节点，首先调整以他们为堆顶的子堆，满足大根堆的性质（使用向下调整），然后调整他们父母为顶的子堆，满足大根堆的性质，直到调整到整个堆的顶部，就能保证整个堆满足了大根堆的性质。</p><h3 id="删除元素">删除元素</h3><p>删除任何一个元素都是一样的，只需要把这个元素放到最后，然后把堆的大小一缩，诶，那个元素就被挡在外面了。那么原本末尾的元素呢，就放到删掉的元素的原本的位置，也就是位置互换了。互换之后末尾的元素还在堆内，但是不满足堆的性质了，所以需要根据和父节点、两个子节点的大小关系判断该选择上浮还是下沉。但是一般我们常用的就是删除堆顶，那堆顶都删没了，新进来的元素肯定没有第二层的大呀，所以需要下沉调整。</p><p>这里注意，有的时候我们只是需要形式上把堆顶拿出来，放在后面，并不需要真的把它从这个数组中删掉，只是不在堆中了。这时我们可以使用一个元素来代表堆的末尾指针。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">heapPop</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; heap, <span class="hljs-type">int</span> end)</span></span>&#123;<br>    <span class="hljs-type">int</span> tmp = heap[end];<br>    heap[end] = heap[<span class="hljs-number">0</span>];<br>    heap[<span class="hljs-number">0</span>] = tmp;<br>    <span class="hljs-built_in">adjustDown</span>(heap, <span class="hljs-number">0</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="堆的应用-第k大元素">堆的应用-第k大元素</h3><p>堆在找第k大这种问题上应用比较多。具体就是使用我们的删除操作，每轮删掉一个最大的，这样删k轮就找到第k大了。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">findKth</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums, <span class="hljs-type">int</span> k)</span></span>&#123;<br>    <span class="hljs-built_in">buildHeap</span>(nums);<br>    <span class="hljs-type">int</span> end = nums.<span class="hljs-built_in">size</span>() - <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; k; i++)&#123;<br>        <span class="hljs-built_in">heapPop</span>(nums, end);<br>        end--;<br>    &#125;<br>    <span class="hljs-keyword">return</span> end + <span class="hljs-number">1</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>但是其实这样是绕了弯路的，因为需要首先建堆，然后一次一次地调整。如果我们换一种思路呢？我们可以用大根堆维护所有的元素，那我们也可以用一个小根堆维护前k大的元素，这个时候小根堆的堆顶就是第k大的元素，每来一个数就和堆顶比较一下，如果比堆顶小，那么说明数组中已经发现了k个比堆顶元素大的数，那么堆顶显然就不可能是前k大的元素之一了，应该被踢掉。如此遍历整个数组，就能得到整个数组前k大的数构成的小根堆，堆顶就是第k大的元素。</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-built_in">int</span> find<span class="hljs-constructor">Kth(<span class="hljs-params">vector</span>&lt;<span class="hljs-params">int</span>&gt;&amp; <span class="hljs-params">nums</span>, <span class="hljs-params">int</span> <span class="hljs-params">k</span>)</span>&#123;<br>vector&lt;<span class="hljs-built_in">int</span>&gt; heap;<br><span class="hljs-keyword">for</span>(<span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span>; i &lt; k; i++)&#123;<br>heap<span class="hljs-constructor">Insert(<span class="hljs-params">heap</span>, <span class="hljs-params">nums</span>[<span class="hljs-params">k</span>])</span>;<span class="hljs-comment">//注意这里的heapInsert应该根据小根堆来写</span><br>&#125;<br><span class="hljs-keyword">for</span>(<span class="hljs-built_in">int</span> i = k; i &lt; nums.size<span class="hljs-literal">()</span>; i++)&#123;<br><span class="hljs-keyword">if</span>(nums<span class="hljs-literal">[<span class="hljs-identifier">i</span>]</span> &gt; heap<span class="hljs-literal">[<span class="hljs-number">0</span>]</span>)&#123;<br>heap<span class="hljs-literal">[<span class="hljs-number">0</span>]</span> = nums<span class="hljs-literal">[<span class="hljs-identifier">i</span>]</span>;<span class="hljs-comment">//替换掉堆顶</span><br>adjust<span class="hljs-constructor">Down(<span class="hljs-params">heap</span>, 0)</span>;<span class="hljs-comment">//向下调整</span><br>&#125;<br>&#125;<br>return heap<span class="hljs-literal">[<span class="hljs-number">0</span>]</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Algorithm</category>
      
      <category>C++</category>
      
      <category>job</category>
      
    </categories>
    
    
    <tags>
      
      <tag>algorithm</tag>
      
      <tag>heap</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>&lt;数据结构/算法&gt; leetcode hot100系列. 22.括号生成Generate Parenthesis</title>
    <link href="/2024/06/16/lc_22_generate_parenthesis/"/>
    <url>/2024/06/16/lc_22_generate_parenthesis/</url>
    
    <content type="html"><![CDATA[<h1>[LeetCode hot 100] 22. 括号生成Generate Parenthesis</h1><p>这个也是一道回溯题，核心是要意识到一个现有的序列中左括号数量一定不能比右括号少，否则就会出现有右括号没有左括号对应的情况。什么都没有的情况下，第一个只能来左括号，当有一个&quot;(“，第二个就可以是”(“或”)“。如果第二个是”(“，第三个是啥都行，但是如果第二个是”)&quot;，前面的左括号和右括号就全部配对了，第三个就只能是左括号。有了这个思路，每次向下搜索时：</p><ul><li>如果之前序列左括号总数大于右括号总数，下一个就可以是左括号也可以是右括号。</li><li>如果左括号总数等于右括号总数，下一个就只能是左括号。</li></ul><p>那么就可以写代码了：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">vector&lt;string&gt; <span class="hljs-title">generateParenthesis</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span> </span>&#123;<br>        vector&lt;string&gt; ans;<br>        string cur;<br>        <span class="hljs-built_in">backtrack</span>(ans, cur, n, n);<br>        <span class="hljs-keyword">return</span> ans;<br>    &#125;<br>    <br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">backtrack</span><span class="hljs-params">(vector&lt;string&gt;&amp; ans, string cur, <span class="hljs-type">int</span> left, <span class="hljs-type">int</span> right)</span></span>&#123;<br>        <span class="hljs-keyword">if</span>(left == <span class="hljs-number">0</span>)&#123;<br>            <span class="hljs-keyword">while</span>(right &gt; <span class="hljs-number">0</span>)&#123;<br>                cur += <span class="hljs-string">&quot;)&quot;</span>;<br>                right--;<br>            &#125;<br>            ans.<span class="hljs-built_in">push_back</span>(cur);<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <br>        <span class="hljs-keyword">if</span>(left &lt; right)&#123;<br>            <span class="hljs-built_in">backtrack</span>(ans, cur+<span class="hljs-string">&quot;(&quot;</span>, left<span class="hljs-number">-1</span>, right);<br>            <span class="hljs-built_in">backtrack</span>(ans, cur+<span class="hljs-string">&quot;)&quot;</span>, left, right<span class="hljs-number">-1</span>);<br>        &#125;<br>        <span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-built_in">backtrack</span>(ans, cur+<span class="hljs-string">&quot;(&quot;</span>, left<span class="hljs-number">-1</span>, right);<br>        &#125;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Algorithm</category>
      
      <category>C++</category>
      
      <category>job</category>
      
    </categories>
    
    
    <tags>
      
      <tag>algorithm</tag>
      
      <tag>backtrack</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>&lt;数据结构/算法&gt; leetcode hot100系列. 46.全排列Permutation</title>
    <link href="/2024/06/16/lc_46_permutation/"/>
    <url>/2024/06/16/lc_46_permutation/</url>
    
    <content type="html"><![CDATA[<h1>[LeetCode hot 100] 46. 全排列Permutation</h1><p>拿到这道题的时候总感觉答案就在嘴边，但是写了写就感觉怎么都不对劲，原因是没有意识到这是一个回溯题。所谓回溯算法，百度百科给出的定义是：</p><blockquote><p>回溯法也称试探法，它的基本思想是：从问题的某一种状态（初始状态）出发，搜索从这种状态出发所能达到的所有“状态”，当一条路走到“尽头”的时候（不能再前进），再后退一步或若干步，从另一种可能“状态”出发，继续搜索，直到所有的“路径”（状态）都试探过。这种不断“前进”、不断“回溯”寻找解的方法，就称作“回溯法”。</p></blockquote><p>回溯算法最大的特征就是它是自顶向下的，也就是从顶部的什么都没有，慢慢往深处探索，在最底端得到答案。</p><p>对于这道题而言，一开始是什么都不知道的，假如说有个序列[1, 2, 3]，首先确定出第一个数，可以是[1]，可以是[2]，可以是[3]。当第一个数为1时，再确定第二个数，可以是[1, 2]或[1, 3]，然后确定第三个数。当我们确定第三个数之后的时候，实际上是已经得到了两个答案，就应该把这两个答案立即加到答案集合中。也就是说，我们写出来虽然也是递归的形势，但是只是用递归实现了类似栈的回退作用，答案并不是在最顶层得到，而是在最底层得到。</p><p>具体如何操作请见代码。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt; <span class="hljs-built_in">permute</span>(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums) &#123;<br>        vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt; ans;<br>        vector&lt;<span class="hljs-type">int</span>&gt; cur;<br>        <span class="hljs-type">int</span>* visited = <span class="hljs-keyword">new</span> <span class="hljs-type">int</span>[nums.<span class="hljs-built_in">size</span>()]&#123;<span class="hljs-number">0</span>&#125;;<br>        <span class="hljs-built_in">backtrack</span>(nums, cur, visited, ans);<br>        <span class="hljs-keyword">return</span> ans;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">backtrack</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums, vector&lt;<span class="hljs-type">int</span>&gt; cur, <span class="hljs-type">int</span>* visited, vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt;&amp; ans)</span></span>&#123;<br>        <span class="hljs-keyword">if</span>(cur.<span class="hljs-built_in">size</span>() == nums.<span class="hljs-built_in">size</span>()) &#123;<br>            <span class="hljs-comment">//探到最底层，得到一个答案，放到结果中</span><br>            ans.<span class="hljs-built_in">push_back</span>(cur);<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; nums.<span class="hljs-built_in">size</span>(); i++)&#123;<br>            <span class="hljs-keyword">if</span>(visited[i] == <span class="hljs-number">0</span>)&#123;<br>                <span class="hljs-comment">//往下探索一层</span><br>                cur.<span class="hljs-built_in">push_back</span>(nums[i]);<br>                visited[i] = <span class="hljs-number">1</span>;<br>                <span class="hljs-built_in">backtrack</span>(nums, cur, visited, ans);<br>                <span class="hljs-comment">//回到当前这一层</span><br>                visited[i] = <span class="hljs-number">0</span>;<br>                cur.<span class="hljs-built_in">pop_back</span>();<br>                <br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Algorithm</category>
      
      <category>C++</category>
      
      <category>job</category>
      
    </categories>
    
    
    <tags>
      
      <tag>algorithm</tag>
      
      <tag>backtrack</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>&lt;数据结构/算法&gt; 2.归并排序Merge Sort</title>
    <link href="/2024/06/13/%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8FMergeSort/"/>
    <url>/2024/06/13/%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8FMergeSort/</url>
    
    <content type="html"><![CDATA[<h1>归并排序Merge Sort</h1><p>归并排序个人感觉理解起来没什么难度，主要就是一个递归地合并子序列的过程，直接写代码，在代码特殊的地方说明一下</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">merge</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt; &amp;arr, <span class="hljs-type">int</span> left, <span class="hljs-type">int</span> mid, <span class="hljs-type">int</span> right)</span></span>&#123;<br>    <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">tmp</span><span class="hljs-params">(right - left + <span class="hljs-number">1</span>)</span></span>;<br>    <span class="hljs-type">int</span> pl = left, pr = mid;<br>    <span class="hljs-keyword">while</span>(pl &lt;= mid - <span class="hljs-number">1</span> &amp;&amp; pr &lt;= right)&#123;<br>        <span class="hljs-keyword">if</span>(arr[pl] &lt; arr[pr])&#123;<br>            tmp.<span class="hljs-built_in">push_back</span>(arr[pl++]);<br>        &#125;<br>        <span class="hljs-keyword">else</span>&#123;<br>            tmp.<span class="hljs-built_in">push_back</span>(arr[pr++]);<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">//下面这两个循环只会执行一个，因为不可能左右子列都有元素剩余</span><br>    <span class="hljs-keyword">while</span>(pl &lt;= mid - <span class="hljs-number">1</span>)&#123;<br>        tmp.<span class="hljs-built_in">push_back</span>(arr[pl++]);<br>    &#125;<br>    <span class="hljs-keyword">while</span>(pr &lt;= right)&#123;<br>        tmp.<span class="hljs-built_in">push_back</span>(arr[pr++]);<br>    &#125;<br>    <span class="hljs-type">int</span> j = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = left; i &lt;= right; i++)&#123;<br>        arr[i] = tmp[j++];<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">mergeSort</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt; &amp;arr, <span class="hljs-type">int</span> left, <span class="hljs-type">int</span> right)</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(left &gt;= right) <span class="hljs-keyword">return</span>;<br>    <span class="hljs-type">int</span> mid = (left + right) / <span class="hljs-number">2</span>;<br>    <span class="hljs-built_in">mergeSort</span>(arr, left, mid - <span class="hljs-number">1</span>);<br>    <span class="hljs-built_in">mergeSort</span>(arr, mid, right);<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Algorithm</category>
      
      <category>C++</category>
      
      <category>job</category>
      
    </categories>
    
    
    <tags>
      
      <tag>algorithm</tag>
      
      <tag>sort</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>&lt;数据结构/算法&gt; 1.快速排序Quick Sort</title>
    <link href="/2024/06/12/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8FQuick%20Sort/"/>
    <url>/2024/06/12/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8FQuick%20Sort/</url>
    
    <content type="html"><![CDATA[<h1>快速排序Quick Sort</h1><p>事实上对于快速排序一直以来都是懵懵的，苦想后终于茅塞顿开。</p><p>首先，快速排序是一个递归的算法，核心思想是在一个序列中选择一个分界值（Pivot），将该序列中的元素划分为左右两部分，左边的元素均小于分界值，右边的元素大于分界值。然后对左右两边分别递归地执行此操作。</p><p>那么怎样执行这个“分成左右两边”的操作呢？目前最简洁的方法是这样的。</p><ul><li>设立一个快指针fast，一个慢指针slow。快指针用于循环，慢指针用于指向一个位置。</li><li>指向的位置是什么呢？就是下一次遇到比pivot值小的元素时，应该把它填在哪里。</li><li>那么这个位置怎么确定呢，很简单，从序列最左边开始，每找到一个比pivot值小的元素就放到左边，然后往右挪一下就行了。对应到slow指针也就是每次往slow指针位置放，然后slow++。</li><li>那么原来位置上的元素怎么办呢？直接和当前这个快指针指向的元素，也就是那个比pivot值小的元素，互换位置就好了。</li><li>这样做，遍历一遍后，比pivot小的值都往左边不断地堆放，最后全在左边了。剩下的比pivot大的值自然就跑到右边去了。</li><li>但是还有一个pivot值没有处理，这个值往往是选择序列最左边或者最右边的元素，我们在刚刚的遍历中直接略过。也就是如果选了最左边的元素，一开始遍历就直接从第二个元素开始了。如果是最右边的元素，遍历的时候就到倒数第二个元素停止。</li><li>最后剩下的slow元素，很明显是要放到中间的。注意到这个时候slow指针正好就在中间，交换位置即可。这里有两种情况：<ul><li>一种是每次交换后slow再++，也就是下一次放就是直接放到slow的位置。这种情况下遍历结束后的slow应该是指向第一个比pivot大的元素，也就是右边序列的最左端。如果pivot是左端点则需要和slow-1位置互换，这样把slow-1也就是最后一个比pivot小的值换到最前面，如果pivot是右端点则直接和slow互换，这样把第一个比pivot大的值换到最后面。</li><li>第二种是先slow++再交换，这样每一次交换前需要先把slow++挪到下一个位置。这种情况下遍历结束后的slow就是最后一个比pivot小的元素。对于两种pivot位置和第一种情况同理。</li></ul></li></ul><p>以下是C++代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">partition</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt; &amp;arr, <span class="hljs-type">int</span> left, <span class="hljs-type">int</span> right)</span></span>&#123;<br>    <span class="hljs-type">int</span> pivot = arr[right];<br>    <span class="hljs-type">int</span> slow = left;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> fast = left; fast &lt; right; fast++)&#123;<br>        <span class="hljs-keyword">if</span>(arr[fast] &lt; pivot)&#123;<br>            <span class="hljs-type">int</span> tmp = arr[slow];<br>            arr[slow] = arr[fast];<br>            arr[fast] = tmp;<br>            slow++;<br>        &#125;<br>    &#125;<br>    arr[right] = arr[slow];<br>    arr[slow] = pivot;<br>    <span class="hljs-keyword">return</span> slow;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">quickSort</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt; &amp;arr, <span class="hljs-type">int</span> left, <span class="hljs-type">int</span> right)</span></span>&#123;<br>    <span class="hljs-type">int</span> p = <span class="hljs-built_in">partition</span>(arr, left, right);<br>    <span class="hljs-built_in">quickSort</span>(arr, left, p<span class="hljs-number">-1</span>);<br>    <span class="hljs-built_in">quickSort</span>(arr, p+<span class="hljs-number">1</span>, right);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>  vector&lt;<span class="hljs-type">int</span>&gt; arr = &#123;<span class="hljs-number">7</span>, <span class="hljs-number">9</span>, <span class="hljs-number">2</span>, <span class="hljs-number">5</span>, <span class="hljs-number">1</span>&#125;;<br>  <span class="hljs-built_in">quickSort</span>(arr, <span class="hljs-number">0</span>, arr.<span class="hljs-built_in">size</span>() - <span class="hljs-number">1</span>);<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; arr.<span class="hljs-built_in">size</span>(); i++)&#123;<br>    cout &lt;&lt; arr[i] &lt;&lt; <span class="hljs-string">&quot;,&quot;</span>;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>其实就是这么简单的道理，不知道自己以前为什么那么久没搞明白，还是太菜了。</p>]]></content>
    
    
    <categories>
      
      <category>Algorithm</category>
      
      <category>C++</category>
      
      <category>job</category>
      
    </categories>
    
    
    <tags>
      
      <tag>algorithm</tag>
      
      <tag>sort</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>C++ STL常用容器及使用方法</title>
    <link href="/2024/03/24/CppSTL/"/>
    <url>/2024/03/24/CppSTL/</url>
    
    <content type="html"><![CDATA[<h1>C++的STL库常用数据结构及方法</h1><h2 id="1-vector可变数组">1. vector可变数组</h2><h3 id="1-1-引入">1.1 引入</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;vector&gt;</span></span><br></code></pre></td></tr></table></figure><h3 id="1-2-创建">1.2 创建</h3><ul><li>创建空vector</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp">vector&lt;<span class="hljs-type">int</span>&gt; vct;<br></code></pre></td></tr></table></figure><ul><li>创建一定长度的vector</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">vct</span><span class="hljs-params">(<span class="hljs-number">10</span>)</span></span>;<br></code></pre></td></tr></table></figure><ul><li>创建一定长度的vector，并且给所有元素赋初始值</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">vct</span><span class="hljs-params">(<span class="hljs-number">10</span>, <span class="hljs-number">1</span>)</span></span>;<br></code></pre></td></tr></table></figure><ul><li>创建一个指定元素值的vector</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp">vector&lt;<span class="hljs-type">int</span>&gt; vct&#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>&#125;;<br></code></pre></td></tr></table></figure><ul><li>使用迭代器创建vector</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp">vector&lt;<span class="hljs-type">int</span>&gt; tmp&#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>&#125;;<br><span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">vct</span><span class="hljs-params">(tmp.begin(), tmp.end())</span></span>;<br></code></pre></td></tr></table></figure><h3 id="1-3-方法">1.3 方法</h3><ul><li><p>向尾部添加元素push_back, emplace_back</p><p>push_back()会先创建一个临时对象，然后复制或移动到容器尾部。emplace_back是C++ 11新引入的方法，直接在容器尾部创建这个对象。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp">vct.<span class="hljs-built_in">push_back</span>(<span class="hljs-number">1</span>);<br>vct.<span class="hljs-built_in">emplace_back</span>(<span class="hljs-number">1</span>);<br></code></pre></td></tr></table></figure></li><li><p>向某一位置插入元素insert，emplace</p><p>同理，emplace是C++ 11新特性</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cpp">vct.<span class="hljs-built_in">insert</span>(pos, val);<span class="hljs-comment">//在pos位置插入元素val</span><br>vct.<span class="hljs-built_in">insert</span>(vct.<span class="hljs-built_in">begin</span>()+<span class="hljs-number">2</span>, <span class="hljs-number">1</span>);<span class="hljs-comment">//在下标为2处插入1</span><br>vct.<span class="hljs-built_in">insert</span>(vct.<span class="hljs-built_in">begin</span>()+<span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">1</span>);<span class="hljs-comment">//在下标为2处插入3个1</span><br></code></pre></td></tr></table></figure></li><li><p>删除尾部元素pop_back</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp">vct.<span class="hljs-built_in">pop_back</span>();<br></code></pre></td></tr></table></figure></li><li><p>删除指定位置的元素erase</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp">vct.<span class="hljs-built_in">erase</span>(vct.<span class="hljs-built_in">begin</span>()+<span class="hljs-number">2</span>);<span class="hljs-comment">//删除下标为2的元素</span><br>vct.<span class="hljs-built_in">erase</span>(vct.<span class="hljs-built_in">begin</span>()+<span class="hljs-number">2</span>, vct.<span class="hljs-built_in">begin</span>()+<span class="hljs-number">5</span>);<span class="hljs-comment">//删除下标为2到4的元素</span><br></code></pre></td></tr></table></figure></li><li><p>清空vector</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf">vct.clear()<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure></li></ul><h2 id="2-stack栈">2. stack栈</h2><h3 id="2-1-引入">2.1 引入</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs <stack">#include&lt;stack&gt;<br></code></pre></td></tr></table></figure><h3 id="2-2-构造stack对象">2.2 构造stack对象</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp">stack&lt;<span class="hljs-type">int</span>&gt; st;<br></code></pre></td></tr></table></figure><h3 id="2-3-方法">2.3 方法</h3><ul><li><p>入栈push</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp">st.<span class="hljs-built_in">push</span>(<span class="hljs-number">1</span>);<br>st.<span class="hljs-built_in">emplace</span>(<span class="hljs-number">1</span>);<br></code></pre></td></tr></table></figure></li><li><p>出栈pop</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp">st.<span class="hljs-built_in">pop</span>();<span class="hljs-comment">//void函数，仅出栈操作</span><br></code></pre></td></tr></table></figure></li><li><p>获取栈顶top</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-type">int</span> a = st.<span class="hljs-built_in">top</span>();<br></code></pre></td></tr></table></figure></li><li><p>判空empty</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">if</span>(!st.<span class="hljs-built_in">empty</span>())&#123;<br>    ...<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h2 id="3-队列queue">3. 队列queue</h2><h3 id="3-1-引入">3.1 引入</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;queue&gt;</span></span><br></code></pre></td></tr></table></figure><h3 id="3-2-构造queue对象">3.2 构造queue对象</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp">queue&lt;<span class="hljs-type">int</span>&gt; q;<br></code></pre></td></tr></table></figure><h3 id="3-3-方法">3.3 方法</h3><ul><li><p>入队push，emplace</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs abnf">q.push(<span class="hljs-number">1</span>)<span class="hljs-comment">;</span><br>q.emplace(<span class="hljs-number">1</span>)<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure></li><li><p>出队pop</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp">q.<span class="hljs-built_in">pop</span>();<br></code></pre></td></tr></table></figure></li><li><p>获取队头、队尾元素front，back</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-type">int</span> a = q.<span class="hljs-built_in">front</span>();<br>a = q.<span class="hljs-built_in">back</span>();<br></code></pre></td></tr></table></figure></li></ul><h2 id="4-双向队列deque">4. 双向队列deque</h2><h3 id="4-1-引入">4.1 引入</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;deque&gt;</span></span><br></code></pre></td></tr></table></figure><h3 id="4-2-构造deque对象">4.2 构造deque对象</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp">deque&lt;<span class="hljs-type">int</span>&gt; dq;<br><span class="hljs-function">deque&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">dq</span><span class="hljs-params">(len, val)</span></span>;<br></code></pre></td></tr></table></figure><h3 id="4-3-方法">4.3 方法</h3><ul><li><p>前端插入元素push_front，emplace_front</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp">dq.<span class="hljs-built_in">push_front</span>(<span class="hljs-number">1</span>);<br>dq.<span class="hljs-built_in">emplace_front</span>(<span class="hljs-number">1</span>);<br></code></pre></td></tr></table></figure></li><li><p>后端插入元素push_back，emplace_back</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp">dq.<span class="hljs-built_in">push_back</span>(<span class="hljs-number">1</span>);<br>dq.<span class="hljs-built_in">emplace_back</span>(<span class="hljs-number">1</span>);<br></code></pre></td></tr></table></figure></li><li><p>前后端出队pop_front，pop_back</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp">dq.<span class="hljs-built_in">pop_front</span>();<br>dq.<span class="hljs-built_in">pop_back</span>();<br></code></pre></td></tr></table></figure></li><li><p>访问元素front，back</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-type">int</span> a = dq.<span class="hljs-built_in">front</span>();<br><span class="hljs-type">int</span> b = dq.<span class="hljs-built_in">back</span>();<br></code></pre></td></tr></table></figure></li><li><p>清空clear</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp">dq.<span class="hljs-built_in">clear</span>();<br></code></pre></td></tr></table></figure></li></ul><h2 id="5-集合set">5. 集合set</h2><h3 id="5-1-引入">5.1 引入</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;set&gt;</span></span><br></code></pre></td></tr></table></figure><h3 id="5-2-构造set">5.2 构造set</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp">set&lt;<span class="hljs-type">int</span>&gt; s;<br></code></pre></td></tr></table></figure><h3 id="5-3-方法">5.3 方法</h3><ul><li><p>插入元素insert，emplace</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp">s.<span class="hljs-built_in">insert</span>(<span class="hljs-number">1</span>);<br>s.<span class="hljs-built_in">emplace</span>(<span class="hljs-number">1</span>);<br></code></pre></td></tr></table></figure></li><li><p>删除元素erase</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp">s.<span class="hljs-built_in">erase</span>(<span class="hljs-number">1</span>);<span class="hljs-comment">//删除值为1的元素</span><br></code></pre></td></tr></table></figure></li><li><p>查找元素count，find</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">if</span>(s.<span class="hljs-built_in">count</span>(<span class="hljs-number">1</span>))&#123;<span class="hljs-comment">//若存在则返回1，否则返回0</span><br>    ...<br>&#125;<br><span class="hljs-keyword">if</span>(s.<span class="hljs-built_in">find</span>(<span class="hljs-number">1</span>) != s.<span class="hljs-built_in">end</span>())&#123;<span class="hljs-comment">//若存在则返回迭代器，否则返回end()</span><br>    ...<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>清空clear</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp">s.<span class="hljs-built_in">clear</span>();<br></code></pre></td></tr></table></figure></li></ul><h2 id="6-键值映射map">6. 键值映射map</h2><h3 id="6-1-引入">6.1 引入</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;map&gt;</span></span><br></code></pre></td></tr></table></figure><h3 id="6-2-构造">6.2 构造</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp">map&lt;<span class="hljs-type">char</span>, <span class="hljs-type">int</span>&gt; mp;<br></code></pre></td></tr></table></figure><h3 id="6-3-方法">6.3 方法</h3><ul><li><p>插入元素insert, emplace</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp">mp.<span class="hljs-built_in">insert</span>(<span class="hljs-built_in">pair</span>&lt;<span class="hljs-type">char</span>, <span class="hljs-type">int</span>&gt;(<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-number">1</span>));<br>mp.<span class="hljs-built_in">emplace</span>(<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-number">1</span>);<br></code></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <categories>
      
      <category>Programming Language</category>
      
      <category>C++</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
      <tag>STL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SpotServe, Serving Generative Large Language Models on Preemptible Instances</title>
    <link href="/2024/02/03/SpotServe/"/>
    <url>/2024/02/03/SpotServe/</url>
    
    <content type="html"><![CDATA[<h1><strong>SpotServe: Serving Generative Large Language Models on Preemptible Instances</strong></h1><p>Author: Xupeng Miao, et al.</p><h2 id="Background">Background</h2><h3 id="Generative-LLM">Generative LLM</h3><p><img src="https://lh7-us.googleusercontent.com/__jCtoUnwYaYZ8vWKlfn_-PsE6uQZ41sjjkrQ0it5gVYu5o9_R3DIciYp3GgOunsNsa0Pz5mRqJvuHHwhRx1t64AdmjazFVge6AqVtAC8WouPtAj0S71vs6tbg5f4DaEFC0ndDRucqVq4Ngwt98sAwF3DQ=s2048" alt="img"></p><ul><li><p>Input: tokens;</p></li><li><p>Output: token sequence</p></li><li><p>Stops when: output reaches maximum length/ending token <EOT></EOT></p></li></ul><h3 id="Two-types-of-GPU-Instances">Two types of GPU Instances</h3><ul><li><p>On-demand GPUs:</p><ul><li><strong>Expensive</strong></li><li>Use anytime you need</li></ul></li><li><p>Preemptible GPU Instances (e.g. Spot Instances):</p><ul><li><strong>Cheap (run on spare capacity)</strong></li><li>Might be Preempted anytime</li><li>Offers a grace period after preemption to complete currently running tasks</li></ul><p><img src="https://lh7-us.googleusercontent.com/DkwxhSsXc0N0WC81IuCqRq9LXtl9aXjPPiM8yei1CeiuHp_jHZOZWvidvJrN-hygJVM_vc9wGKiqVlTVJiv5vhHzOCEXUKpK20txDLNUNcxoz3nKE0O7KDXFiAfXOU85Qax8Nsg1q_sOIDuHFZ148YG1IQ=s2048" alt="img"></p></li></ul><h2 id="Challenges">Challenges</h2><ul><li><p>The number of available preemptible instances changes frequently <strong>=&gt;</strong> <strong>Dynamic reparallelization</strong> for optimized serving performance</p></li><li><p>Restarting LLM results in great overhead of reloading parameters <strong>=&gt;</strong> Find the <strong>optimal migration strategy</strong> that minimize the cost</p></li><li><p>Grace periods may not be long enough for finishing current request</p></li><li><p>The reduction of throughput during this process might lead to accumulation of subsequent requests</p></li></ul><h2 id="SpotServe">SpotServe</h2><h3 id="Overview">Overview</h3><p><img src="https://lh7-us.googleusercontent.com/XZZe4AHfMJmr_CeXTrBMCnfXwgQzDLcx_JWctJd7FrUSSlvNvBLlWeiNsg_rdVoFw-qOODUKmDPkdLP5tIQ-aTJgIwW095JejoCQ2C422osBni5AsSlbR1bBp0M0x0ZSIjhAlCKAZYzGHrAUS4few2Fzpw=s2048" alt="img"></p><ul><li>Request Manager: handle requests, partition into batches, assign them to instances, send output to users</li><li>Instance server: monitor the preemption and acquisition of instances</li><li>Meta-context manager: schedule the context migration between GPU instances (parameters, outputs, etc.)</li></ul><h3 id="Meta-context-Manager">Meta-context Manager</h3><h4 id="Parallelization-Controller">Parallelization Controller</h4><h5 id="Parallelization-Configurations">Parallelization Configurations:</h5><ul><li><strong>D</strong>: Data Parallelization: partition requests and assign them to different pipelines</li><li><strong>P</strong>: Pipeline model parallelization: run different stages of a inference process simultaneously (like pipeline in CPU)</li><li><strong>M</strong>: Tensor model parallelization: split the model into shards and assign to different GPUsParallel</li><li>Configuration <strong>C</strong> = (D, P, M)</li></ul><p><img src="https://lh7-us.googleusercontent.com/vyC2ivtUjb6jx-4a44Fb-CCILGpqTHIEZMD-sRazYRNajDIa6vzZqFXZHArPoHxWMf5MCoAV3lVPlg2r4O3YBeunuAMUd0tM3K6b-MYiMbfvqvoyXCeVAB_1UdUjL5LFmbTta3KVMqO1xVF8CMCfSj4M0w=s2048" alt="img"></p><p><img src="https://lh7-us.googleusercontent.com/UgHiPq-iqfUTUlfZ_eKKxCdAKfGLZ35NR8BfY9Fysni41dIrpP4mwr2jlxwCZq5_W2W-pTUv4ptNxZ0NTF5lYBbXBIXXdNyrzF5aTfRP-tRd5i6uhKirSBcDYuvl4LGq_TBrEBgU7TpoczmxQTtrBP4weQ=s2048" alt="img"></p><h5 id="Configuration-Optimizer">Configuration Optimizer</h5><p><img src="https://lh7-us.googleusercontent.com/vzMkndwQq5s5d6cRu5F28hXBWyoeNyr7_5-GZZgR-MG9ntKYYiWoiZLk5JWeBT99xYLULeWop0OObtPAduL5HGPQ2pO0gCz7dqPS3SGl3M0DXXOzbzIbShbMAlZMrdbLLGDV5HoI0EMUM75r5OLS5u0BCw=s2048" alt="img"></p><p><strong>If</strong> there is a configuration such that the throughput is larger than the request arrival rate, <strong>then</strong> choose the configuration that has minimum inference latency while making sure the throughput is larger than arrival rate. <strong>Otherwise</strong>, find the C for maximum throughput.</p><p><strong>After</strong> adjusting the configuration, allocate or free instances.</p><p>Offline process =&gt; low latency</p><p><strong>What do we have now?</strong></p><ul><li>We now have a configuration for the next step.</li><li>However, we only decided the parallelization structure.</li><li>How should us decide how to map the physical instances to logical positions?</li></ul><h4 id="Device-Mapper"><strong>Device Mapper</strong></h4><ul><li><strong>Goal</strong>: find the matching strategy that maximize reusable context (i.e., edge weight sum)</li></ul><p><img src="https://lh7-us.googleusercontent.com/uIwqLoTUUz66a9PkQfiKllRlJP7g_mo73tNQUaVjOgzxk2FGEubdwFaqxXFLd-CJTUpHL-xhb7aZgu2RdAtBXWbS-1_l_RPJRRJwtD8xm5-b1d_sXZGh0ZbjowZCw59DEeYrJeWKPAxD65Z8Hl4A6kYy_A=s2048" alt="img"></p><ul><li><strong>Approach</strong>: *KM (*<em>Kuhn-Munkres) Algorithm</em> for Bipartite Graph Maximum Weight Matching</li></ul><p><img src="/.com//D:%5Cdingblog%5Csource%5Cimg%5Cspotserve%5Cbigraph.png" alt></p><p>edges: e(u, v) indicates reusable parameters and caches when mapping GPU u to position v.</p><h4 id="Migration-Planner"><strong>Migration Planner</strong></h4><p><img src="https://lh7-us.googleusercontent.com/yUY4QY3JBuc3frOpU9igRxgFR7OXxeromn776cGPdnrL47ib7u-Ixyp4WK22dylnd_ehyGMxLcHoikY0isDt18P4eeiCbd2sNgwIxJj3LJfo8dnhQQZwF6fTUidE8uEnhKw0Aspop76el-NK5_jqDSmHZQ=s2048" alt="img"></p><ol><li>From front layers (0, 1) to back layers (N), find the layers whose context do not exceed the buffer size and prioritize migration of these layers.</li><li>For other layers, add them to the sequence by the order of instance buffer memory usage</li><li>After we have the sequence, sequentially migrate the layers in this sequence. If all layers of a specific stage is migrated, start running this stage.</li></ol><h3 id="Just-in-time-Arrangement">Just-in-time Arrangement</h3><p>What should we do if we receive a preemption/acquisition notification while there are still requests running/waiting?</p><ul><li>Immediately suspend and migrate? =&gt; high inference latency</li><li>Finish all requests? =&gt; no enough time for migration</li><li><strong>SpotServe</strong>: for preemption, maximize token generation (since migration happens during the grace period); for acquisition, minimize token generation when exploiting the whole grace period (since migration happens after the grace period)</li></ul><h2 id="Experimental-Evaluation">Experimental Evaluation</h2><h3 id="Comparison">Comparison</h3><ul><li><p>Stable workload</p></li><li><p>P99: latency at the 99th percentage (99% latency &lt;= this value)</p></li><li><p>Baselines: FasterTransformer (reparallelization but no cocntext migration, rerouting with pre-defined config)</p><p><img src="https://lh7-us.googleusercontent.com/8wenNdhNJT1VmN05N0gxrNKqk8qT9xCcZa3uZPePmr35xKSSD1U570V3iEtrlei8-zknw3xUJ4sytACMj_iX-t4Q04UHQyTt6tYhYdXreqnYWplghxE_KIWClBYdpqLAyr5ezVns4JNFY-MY1sQ1efa9zw=s2048" alt="img"></p></li><li><p>Fluctuating Workload</p><p><img src="https://lh7-us.googleusercontent.com/bpEki4DA2MEqzMuhU1nxpj5XOjf6AsjtdWnMpA7DN8GdnbcQd5wVhbgjc6WDs8mFIWf75OlkEMxxBDJ_GAMFwfaL5_imDBvvXSgHAM3jSFm9yIx8n6qqT7F-M2tRLfhvQO3mxoAxPV_3N2msXSgp2ik-Xw=s2048" alt="img"></p></li></ul><h3 id="Ablation">Ablation</h3><p><img src="https://lh7-us.googleusercontent.com/dpK-WvVOgT4EO9BgpTm3HpxJu1DS_IzSShStV--RNiDmU9RROzZobzd9yWV1HvPpaJ0d-dqn5zp1nXjWn1nbctUI-H46em5TNu3Bz5WdQBKqOrVV_HcIqzoqDdxZkU2A3QGr1cK9LrETho7MrDXPRqKeHg=s2048" alt="img"></p>]]></content>
    
    
    <categories>
      
      <category>mlsys</category>
      
    </categories>
    
    
    <tags>
      
      <tag>mlsys</tag>
      
      <tag>distributed system</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Milvus, A Purpose-Built Vector Data Management System</title>
    <link href="/2024/02/03/Milvus/"/>
    <url>/2024/02/03/Milvus/</url>
    
    <content type="html"><![CDATA[<h1>Milvus: A Purpose-Built Vector Data Management System</h1><p>Author: Jianguo Wang ,et al.</p><h3 id="vector-database">vector database</h3><p><img src="https://lh7-us.googleusercontent.com/a1SSv6X8vFe2r4xKdwJtEs4gQZn1wZ0RoCCBWQeNyRfY5XoMlgPK3WDeeIylBIza92CYhsbici0HTGf0iNeIUZj-SRb5eqZQfXEX6QLCDCKpdtDAEUE06VT4zOJdThJPJJJGqjWh_1Fwqhx4e210APvifQ=s2048" alt="img"></p><p>A new type of database specialized in storing and querying vector data.</p><ul><li><p>Traditional relational databases: precise attribute-based searches</p></li><li><p>Vector database: approximate similarity-based vector searches: find the k-nearest vectors to the query.</p></li></ul><h3 id="Background-Motivation">Background &amp; Motivation</h3><p><img src="/.com//D:%5Cdingblog%5Csource%5Cimg%5Cmilvus%5Cmotivation.png" alt></p><h3 id="Challenges">Challenges</h3><p>Current works have the following limitations:</p><ul><li>They are not full-fledged systems and cannot handle large amount of data</li><li>They cannot easily handle dynamic data while ensuring fast real-time searches</li><li>They do not support advanced query processing</li><li>They are not optimized for heterogeneous computing architecture with CPUs and GPUs</li></ul><h3 id="Milvus">Milvus</h3><p>Milvus: a purpose-built vector data management system for managing large-scale and dynamic vector data to enable data science and AI applications.</p><p>Milvus incorporates query processing, indexing and storage management and CPU-GPU codesign into the whole system, successfully addressing the previous issues.</p><h4 id="Overall-Architecture-of-Milvus">Overall Architecture of Milvus</h4><p><img src="https://lh7-us.googleusercontent.com/fLfYZw5bi5SJqc526JvvWF9Cx-v3_mwoboDJgCSvyPyQZPXp9-9V09R0zzmJnSR_IJ5VzQ2cdgPujHesMvg7GIOmnH67yceAwLh3BDXYypLXBQCsHiMAfkhMSBf8fxVTnx-vCywD4YGqTruMwE_VB0XuzQ=s2048" alt="img"></p><h4 id="Query-Processing">Query Processing</h4><p>Support of query types:</p><ul><li>Vector Query (1 vector)</li><li><strong>Attribute Filtering</strong> (1 vector + n attribute constraints)<strong>(Advanced Query)</strong></li><li><strong>Multi-vector Query</strong> (n vectors)<strong>(Advanced Query)</strong></li></ul><p>Support of similarity functions:</p><ul><li>Euclidean distance</li><li>Inner product</li><li>Cosine similarity</li><li>Hamming distance</li><li>Jaccard distance</li></ul><h4 id="Attribute-Filtering">Attribute Filtering</h4><h5 id="img"><img src="https://lh7-us.googleusercontent.com/PIxpQQ5Z7gQ1MACU9tAa6PSjklRxVUxmoLkX62A7-mFhSS_PPCgg7QmXoNU8hQZtn8-MkIa9QyzLXOIF8IZniVmDClHUvkxCUH88iuBP7SFyVzzMtErNFWB_WINUlC6e9gFy6QyJZ2KQZvAd59vPHIgMiA=s2048" alt="img"></h5><ul><li><p>A: ①obtain the satisfied vectors②fully scann them</p></li><li><p>B: ①obtain the satisfied vectors②use bitmap to find the answer</p></li><li><p>C: ①obtain more than k results②fully scan and find those satisfy the attribute constraint</p></li><li><p>D: estimate the cost of A,B,C and find the best one</p></li><li><p>E (Milvus): Partition-based filtering</p><ol><li>Create partitions for data</li><li>Maintain min-max indexes for different partitions</li><li>Skip the partitions whose range of attribute does not overlap with the queries’</li><li>Find the overlapping partitions, and apply strategy D(cost-based) within each partition</li></ol></li></ul><h4 id="Multi-vector-Queries">Multi-vector Queries</h4><ul><li><h5 id="For-decomposable-similarity-functions-Use-aggregate-functions-to-concentrate-the-vectors-and-find-the-k-nearest-neighbors-based-on-the-concentrated-vector-vector-fusion">For decomposable similarity functions: Use aggregate functions to concentrate the vectors and find the k nearest neighbors based on the concentrated vector (vector fusion)</h5></li><li><p>For indecomposable similarity functions:</p></li></ul><p><img src="https://lh7-us.googleusercontent.com/2nbN36rss_FJXsQqeqROW-fWUY1oggQ7aHsP796HQdaQCTObmj09hl2koBem7ygklF9_iVH3Jg3A2GCUYbjmSQozPgdqe2jIgjqc8YCE9-HBJT_EQw1hK6NOTqXWCXhPynJHyr4CnnaMFppibQlTjMcZaA=s2048" alt="img"></p><h4 id="Indexing-Querying">Indexing (Querying)</h4><ul><li><p>Quantization-based Indexing: (Quantization: represent vectors with a codebook. First find n nearest clusters to q, then use the indexing to search within these clusters.)</p><ul><li><p>IVF_FLAT</p></li><li><p>IVF_SQ8</p></li><li><p>IVF_PQ</p><p><img src="https://lh7-us.googleusercontent.com/cQ7gqM4L-mFpA5ciP5EhImJx1pEpdO4lO5yWXXARHCgnVeDfLJcU8feY_Uc-ivjsKUzS-h5p_tGCnv5nSRARPKwspRN9DCXtt3_WhkmQZLdow7A7J97vm1QItFTehk6aFpiek_Qc7ow7X_wTIdxyjW90LQ=s2048" alt="img"></p></li></ul></li><li><p>Graph-based indexing:</p><ul><li>HNSW</li><li>RNSG</li></ul></li></ul><h4 id="Vector-and-Attribute-Storage">Vector and Attribute Storage</h4><p>To facilitate query processing, Milvus stores vectors and attributes in a columnar fasion.</p><ul><li><strong>Vectors</strong>: different vectors of entities are stored together correspondingly.</li><li><strong>Attributes</strong>: &lt;attr value, row ID&gt; pairs + skipping indexes (min-max) for pages</li></ul><p><img src="/.com//D:%5Cdingblog%5Csource%5Cimg%5Cmilvus%5Cstorage.png" alt></p><p>Milvus also relies on LRU-based buffer and supports multiple file systems.</p><h4 id="Optimizations-for-Heterogeneous-Computing">Optimizations for Heterogeneous Computing</h4><p>How to find the top k similar vectors for multiple queries efficiently?</p><ul><li>CPU-oriented Optimization</li><li>GPU-oriented Optimization</li><li>CPU-GPU codesign</li></ul><h4 id="CPU-oriented-Optimization">CPU-oriented Optimization</h4><ul><li><h5 id="Faiss-leveraged-OpenMP-to-realize-multi-threading-Each-thread-process-a-query-at-a-time-Two-issues"><strong>Faiss</strong> leveraged OpenMP to realize multi-threading. Each thread process a query at a time. Two issues:</h5><ul><li>High cache-missing rate (requires to stream the entire data into caches, cannot reuse)</li><li>Cannot fully exploit cores when query number is small</li></ul></li><li><p><strong>Milvus</strong> assign threads to data vectors instead of query vectors to address the 2nd issue.</p><ul><li>Divide the queries into blocks s.t. each query block and its heaps can fit in L3 cache.</li><li>Results are managed in heaps. To obtain the final results, merge the result.</li><li>Milvus is also capable of automatically choosing SIMD instructions for functions.</li></ul></li></ul><h5 id="GPU-oriented-Optimization">GPU-oriented Optimization</h5><ul><li><strong>Faiss</strong>: k&lt;=1024 because of the limit of memory</li><li><strong>Milvus</strong>: divide k into different rounds, each round expanding the obtained result set until reaches the required number.Faiss: must set the number of GPUs in advance; dynamic segment-based scheduling that assign search tasks to available devices</li></ul><h5 id="CPU-GPU-Co-design">CPU-GPU Co-design</h5><ul><li><p>Limitations of <strong>Faiss</strong> (IVF_SQ8):Low PCIe bandwidth utilization (1 bucket per time)Data transfer makes GPU computing unbeneficial</p></li><li><p><strong>Milvus</strong> (SQ8H):High bandwidth utilization (Multiple buckets loaded per time)Assess the running mode (GPU-only or hybrid) based on the batch size</p><p><img src="https://lh7-us.googleusercontent.com/1bi-T_L1k4IU-SxJ1jBMFvNr0yG9j_xd_6dVzgkk1XvZyRNptDrTs4MYPhyZX4lzrCA2enF8bQ06sYe_SKCdhR3TiuSA8dA4eesCGFZ2b6ZjtxB5ptqr-3KiTfyS7FFMEh6MNxuXI2IpTG9N2G3Uj-GS4A=s2048" alt="img"></p></li></ul><h3 id="Applications">Applications</h3><ul><li>Recommender System</li><li><strong>Image Recognition</strong></li><li><strong>Chemical Structure Analysis</strong></li><li>etc.</li></ul><h3 id="Evaluation">Evaluation</h3><h4 id="Evaluation-Comparing-with-other-systems">Evaluation (Comparing with other systems)</h4><ul><li>10M vectors from SIFT1B and Deep1B</li><li>10000 random queries</li></ul><p><img src="https://lh7-us.googleusercontent.com/ENprp6rC88V22r2w7OkwVJ_iQCRo3JWz16ulMGvlaUWXf7yeBZPw4LG3N0ntxUXmMXHia-7ZOKVW5rLj6407GOoVLfTZPbeQTnDKER5bW9ImUvkkMiJvF9C8R2ngaaEovkgmOvAsRdMBW891rUByVLa5ZA=s2048" alt="img"></p><h4 id="Evaluation-cache-aware-design">Evaluation: cache-aware design</h4><p><img src="https://lh7-us.googleusercontent.com/5SyAZyajVqTUSdJOh2ROCylw6dl8Ri1EmLd-Fzz539KXGJq4XVcXVBfslC23JIFzRQXnGBSd2hXKl-A43FQoC66goZvL_nzjsZLeNt-PeWhFulHk_DyNN3TkoZ53SboSvDcVOra9R9dIpMwLmUa2Wg3aAA=s2048" alt="img"></p><h4 id="Evaluation-Attribute-Filtering">Evaluation-Attribute Filtering</h4><p><img src="https://lh7-us.googleusercontent.com/-m3podLKsG3KUBocsv_qeZMc1hfrs8SLUhxwradn7zReuSe3t9-Zy7we5VspsTUWl_lQvsFPXfIDb7dNdcvl5-dalb92GlQ1lm5bempLPhhgkqNyiDP2yhU2Gl6ydjX4QF7RU_5VOqgKLL66uYwzRuGsrw=s2048" alt="img"></p>]]></content>
    
    
    <categories>
      
      <category>vector_db</category>
      
    </categories>
    
    
    <tags>
      
      <tag>vector database</tag>
      
      <tag>cpu-gpu co-design</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>&lt;note&gt;Tiresias：Enabling Predictive Autonomous Storage and Indexing</title>
    <link href="/2023/06/29/Tiresias/"/>
    <url>/2023/06/29/Tiresias/</url>
    
    <content type="html"><![CDATA[<h1>Tiresias：Enabling Predictive Autonomous Storage and Indexing</h1><h2 id="亮点">亮点</h2><p>主要的创新点是能够根据过去的对数据的访问预测未来的访问趋势，提前做出存储结构和索引的变化以适应新的事务或分析需求，即：通过训练，学习①访问的时间规律②访问的延迟预测函数。Tiresias只是根据当前和预测的情况，给出判断：是否应该改变布局，而不执行具体的改变布局的操作。</p><h2 id="应用">应用</h2><ol><li><p>Proteus中根据HTAP负载调整存储结构</p><p>把事务拆分成操作符（storage-specific），方便预测；</p><blockquote><p>这里的操作符意思是：根据存储结构和工作负载对事务进行拆分形成的单元，比如对于某个事务，分解成以下四个操作符：</p><p>① 向数据站点发送请求</p><p>② 获取锁</p><p>③ 按行更新</p><p>④ 提交</p><p>文中并未提及操作符是怎么得来的</p></blockquote><p>调用Tiresias记录操作符延迟和数据访问记录</p><p>预测新的数据访问到来的时间和频率</p><p>最后两步都有API</p></li><li><p>在OLAP DBMS上的predictive cracking</p><p>预测workload变化，改变数据存储</p></li><li><p>PostgreSQL上的自动索引</p><p>记录查询的到达历史、延迟和是否有二级索引（不在主键上创建的索引）</p><p>预测查询类型、延迟和是否有二级索引</p><p>根据Tiresias的预测，添加或去除二级索引</p></li></ol><h2 id="实现">实现</h2><h3 id="数据访问延迟预测">数据访问延迟预测</h3><p>将一个事务拆分成多个相连的操作符，对这些操作符分别计算损失函数再相加</p><ul><li>输入：a~1~，…，a~n~，是将一个操作符（operator）参数化，根据存储结构和工作负载提取的参数。</li><li>损失函数F：<ol><li><strong>线性回归</strong>：（因为速度快延迟小被采用）</li><li>非线性回归</li><li>神经网络（MLP）</li></ol></li><li>采集当前的延迟：采集起止时间和数据读写情况（读写列的总大小等），每个线程有一个observation数据结构，把每一个 &lt;存储结构-操作符&gt; 对应的所有latency保存为一个list，最后汇总在一起，用于训练</li></ul><h3 id="数据访问预测">数据访问预测</h3><p>预测数据何时将要被以什么频次访问</p><p>预测 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>δ</mi><mo stretchy="false">(</mo><mi>T</mi><mo separator="true">,</mo><mi>τ</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">δ(T, \tau)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.03785em;">δ</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.1132em;">τ</span><span class="mclose">)</span></span></span></span>，表示类型 T 的请求在 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>τ</mi></mrow><annotation encoding="application/x-tex">\tau</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal" style="margin-right:0.1132em;">τ</span></span></span></span> 时的一个时间窗口内到来的数量</p><h4 id="SPAR预测器">SPAR预测器</h4><p>包含两部分：</p><ol><li><p>长期周期性变化：</p><p>每个小时、每天或者每年的规律。首先设定好要回顾多少个周期，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>ψ</mi><mi>n</mi></msub></mrow><annotation encoding="application/x-tex">\psi _n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">ψ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>，考虑 前 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>ψ</mi><mi>n</mi></msub></mrow><annotation encoding="application/x-tex">\psi _n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">ψ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 个周期的 δ 值，对它们进行加权，权重 b~i~ 需要学习</p></li></ol><p><img src="/.com//equation1.png" alt></p><ol start="2"><li><p>短期内变化：</p><p>某一个短周期访问量相比于之前周期的变化。此处较难理解。首先看论文给出的公式：</p><p><img src="/.com//equation2.png" alt></p><p>这个公式表示，对于某一个点，比较他的时间窗口内访问量i个周期前(1 ≤ i ≤ <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>ψ</mi><mi>n</mi></msub></mrow><annotation encoding="application/x-tex">\psi_n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">ψ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>)的对应点的窗口。比如说考虑请求量随时间按照正弦函数分布，如果 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>τ</mi></mrow><annotation encoding="application/x-tex">\tau</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal" style="margin-right:0.1132em;">τ</span></span></span></span> 时间在波谷，那么该公式就是将 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>τ</mi></mrow><annotation encoding="application/x-tex">\tau</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal" style="margin-right:0.1132em;">τ</span></span></span></span> 时刻的窗口内的访问量减去前 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>ψ</mi><mi>n</mi></msub></mrow><annotation encoding="application/x-tex">\psi_n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">ψ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 个波谷的窗口内的访问量的平均值。通过该公式衡量当前点与之前周期的对应点的访问量的变化。</p><p>然后将连续 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>ψ</mi><mi>k</mi></msub></mrow><annotation encoding="application/x-tex">\psi_k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">ψ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 个点的 γ 值加权求和。</p><p><img src="/.com//equation3.png" alt></p><p>这两个公式结合在一起，意义是预测周期内的访问量变化的周期性。仍然以正弦函数为例，这个函数表征的就是<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>ψ</mi><mi>k</mi></msub></mrow><annotation encoding="application/x-tex">\psi_k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">ψ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>长度内访问量与n个周期之前<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>ψ</mi><mi>k</mi></msub></mrow><annotation encoding="application/x-tex">\psi_k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">ψ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>长度的区间内访问量有何差异。随着时间推移，通过这个公式，SPAR学习到的就是 “每个周期正弦函数都会有一个波浪形的下坡” 这个特征。</p><p>然后把这个式子和上面长期周期性变化的式子加起来得到 δ 的预测值</p></li></ol><h4 id="Hybrid-Ensemble预测器">Hybrid-Ensemble预测器</h4><p>包含三部分：</p><ol><li><p>长期周期性变化：</p><p>LSTM</p></li><li><p>短期变化：</p><p>线性回归</p></li><li><p>用户自定义holiday list</p><p>设定起止时间和高斯函数(正态分布的概率密度)的参数，如果当前时间在起止时间之间，就用高斯函数计算访问量</p></li></ol><p><strong>访问历史</strong></p><p>每个分区记录一分钟的访问量，轮询收集，将收集到的访问量用于训练</p><ul><li>SPAR：采集前 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>ψ</mi><mi>n</mi></msub></mrow><annotation encoding="application/x-tex">\psi_n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">ψ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 周期的数据存在环形缓冲区内</li><li>HE：使用LSTM，但是Tiresias仍需要保存长期的历史记录</li></ul><h3 id="评估存储结构和索引变化的获利">评估存储结构和索引变化的获利</h3><p>对于存储布局的改变S，考虑两部分：</p><ol><li><p>改变布局本身的消耗：</p><p>U(S)</p></li><li><p>改变布局前后的消耗对比（收益）</p><p>对于当前结构和改变后的结构，分别使用相应的预测器预测事务的延迟L~current~和L~adapt~</p><p>计算C(S)：当前请求的消耗函数</p><p>计算时间 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>τ</mi></mrow><annotation encoding="application/x-tex">\tau</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal" style="margin-right:0.1132em;">τ</span></span></span></span> 时到达T类型指令的可能性Pr(T)</p><p>计算到下一个T类型指令到来需要的时间Δ(T)</p><p>计算E(S, T)：在某一时间预期请求的消耗函数</p><p><img src="/.com//equation4.png" alt></p><p>E决定于延迟的相对变化、请求到来的可能性、请求到来的时间（估计值）</p><p>特别地，如果当前正在处理该类型请求，那么Pr(T) = 1, Δ(T) = 0，带入就是C(S)，也就是当前结构对于当前类型请求的延迟和改变后结构对当前类型请求的延迟的差值 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>L</mi><mrow><mi>c</mi><mi>u</mi><mi>r</mi><mi>r</mi><mi>e</mi><mi>n</mi><mi>t</mi></mrow></msub><mo>−</mo><msub><mi>L</mi><mrow><mi>a</mi><mi>d</mi><mi>a</mi><mi>p</mi><mi>t</mi></mrow></msub></mrow><annotation encoding="application/x-tex">L_{current}-L_{adapt}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">L</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2806em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">c</span><span class="mord mathnormal mtight">u</span><span class="mord mathnormal mtight">rre</span><span class="mord mathnormal mtight">n</span><span class="mord mathnormal mtight">t</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.9694em;vertical-align:-0.2861em;"></span><span class="mord"><span class="mord mathnormal">L</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">a</span><span class="mord mathnormal mtight">d</span><span class="mord mathnormal mtight">a</span><span class="mord mathnormal mtight">pt</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span></span></span></span></p></li></ol><p>最后综合这两部分</p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>N</mi><mo stretchy="false">(</mo><mi>S</mi><mo stretchy="false">)</mo><mo>=</mo><mi>λ</mi><mo stretchy="false">(</mo><mi>E</mi><mo stretchy="false">(</mo><mi>S</mi><mo stretchy="false">)</mo><mo>+</mo><mi>C</mi><mo stretchy="false">(</mo><mi>S</mi><mo stretchy="false">)</mo><mo stretchy="false">)</mo><mo>−</mo><mi>U</mi><mo stretchy="false">(</mo><mi>S</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">N(S) = \lambda (E(S)+C(S))-U(S)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">λ</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="mclose">))</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">U</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="mclose">)</span></span></span></span></p><p>λ用于调控两者之间的相对权重</p><p>也就是说只有：在λ权重下，改变布局带来的收益大于改变布局本身的损失，即 N &gt; 0，才会认为改变布局是可以获利的</p><h2 id="实验">实验</h2><h3 id="数据集">数据集</h3><ul><li>CH-benCHmark：包含TPC-C OLTP workload和TPC-H OLAP workload</li><li>事务型YCSB workload：10个多键读取-修改-写入事务+1个扫描（5e5行）聚合OLAP查询</li></ul><h3 id="访问开销估计器对比">访问开销估计器对比</h3><p>线性回归每轮训练耗时比神经网络和非线性回归分别快1500倍和2500倍，尽管精确度稍微低一些，但是对于判断改变的好坏还是足够了</p><p>线性回归初始精度更高，这样正好可以快速适应负载。</p><h3 id="访问预测器对比">访问预测器对比</h3><p>SPAR精度更高，但是如果周期数设定不合理误差反而会大很多。预测的更易变（毛糙，因为会从之前的预测中继承噪音）空间开销小</p><h3 id="PostgreSQL自动索引效果"><strong>PostgreSQL自动索引效果</strong></h3><p>workload在5、10、15分钟会发生变化</p><p>比较了PortgreSQL+Tiresias, 有索引的PostgreSQL和无索引的PostgreSQL，结果为：</p><p>使用Tiresias的索引选取相比于不加索引和加索引，workload完成时间分别快了70%和15%</p><p>OLAP情况下，加索引最快，但是加索引会导致更新开销变大，因此OLTP情况下，加索引吞吐率最低，而Tiresias由于可以动态调整，因此在OLAP下与加索引速度相当，OLTP下速度与不加索引相当。</p><h3 id="源代码">源代码</h3><p><a href="https://github.com/mtabebe/Adaptive-Storage-Tiresias-and-Proteus/tree/master">https://github.com/mtabebe/Adaptive-Storage-Tiresias-and-Proteus/tree/master</a></p>]]></content>
    
    
    <categories>
      
      <category>db_index</category>
      
      <category>predictive</category>
      
    </categories>
    
    
    <tags>
      
      <tag>postgresql</tag>
      
      <tag>database</tag>
      
      <tag>index</tag>
      
      <tag>predict</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Installing GreenPlum &amp; Python3.7 on Ubuntu Server</title>
    <link href="/2023/05/23/GreenPlum/"/>
    <url>/2023/05/23/GreenPlum/</url>
    
    <content type="html"><![CDATA[<h1>Installing GreenPlum &amp; Python3.7 on Linux(Ubuntu) Server</h1><p>首先配置SSH</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">在服务器端</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">ls</span> ./.ssh</span><br><span class="hljs-meta prompt_">&gt; </span><span class="language-bash">authorized_keys</span><br></code></pre></td></tr></table></figure><p>将本机的id_rsa.pub内容复制到authorized_keys中</p><p>然后可以使用Xshell直接连接，选择私钥的时候选择配对的id_rsa文件即可</p><h2 id="安装GreenPlum">安装GreenPlum</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">sudo apt update</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">sudo apt install software-properties-common</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">sudo add-apt-repository ppa:greenplum/db</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">sudo apt update</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">sudo apt install greenplum-db-6</span><br></code></pre></td></tr></table></figure><p>此时已经安装好了，我们查看安装的版本</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">ls</span> /opt</span><br>greenplum-db-6.24.3<br></code></pre></td></tr></table></figure><p>配置环境变量</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">source</span> /opt/greenplum-db-6.24.3/greenplum_path.sh</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">which</span> gpssh</span><br>/opt/greenplum-db-6.24.3/bin/gpssh<br></code></pre></td></tr></table></figure><p>将初始化文件拷贝到用户目录下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">cp</span> <span class="hljs-variable">$GPHOME</span>/docs/cli_help/gpconfigs/gpinitsystem_singlenode .</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">ls</span></span><br>gpinitsystem_singlenode<br></code></pre></td></tr></table></figure><p>将主机名写入文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">hostname</span><br>node0.dingzr.risb-pg0.utah.cloudlab.us<br><span class="hljs-meta prompt_"># </span><span class="language-bash">创建新文件hostlist_singlenode</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">vim hostlist_singlenode</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">将hostname的输出直接粘贴到里面</span><br></code></pre></td></tr></table></figure><p>创建节点对应的文件夹</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">mkdir</span> greenplum</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">cd</span> greenplum</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">mkdir</span> primary master</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">cd</span> ..</span><br></code></pre></td></tr></table></figure><p>修改初始化文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">vim gpinitsystem_singlenode</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash"><span class="hljs-built_in">declare</span> -a DATA_DIRECTORY=(/users/dingzr/greenplum/primary /users/dingzr/greenplum/primary)</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">MASTER_HOSTNAME=node0.dingzr.risb-pg0.utah.cloudlab.us</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">MASTER_DIRECTORY=/users/dingzr/greenplum/master</span><br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">gpssh-exkeys -f hostlist_singlenode</span><br>[STEP 1 of 5] create local ID and authorize on local host<br><br>[STEP 2 of 5] keyscan all hosts and update known_hosts file<br><br>[STEP 3 of 5] retrieving credentials from remote hosts<br><br>[STEP 4 of 5] determine common authentication file content<br><br>[STEP 5 of 5] copy authentication files to all remote hosts<br><br>[INFO] completed successfully<br><span class="hljs-meta prompt_">$ </span><span class="language-bash">gpinitsystem -c gpinitsystem_singlenode</span><br></code></pre></td></tr></table></figure><p>测试是否安装成功</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">createdb demo</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">psql demo</span><br>psql (9.4.26)<br>Type &quot;help&quot; for help.<br><br>demo=#<br></code></pre></td></tr></table></figure><h2 id="安装python3-7">安装python3.7</h2><p>wget工具下载压缩包</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">wget https://www.python.org/ftp/python/3.7.9/Python-3.7.9.tgz</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">tar -xzvf Python-3.7.9.tgz</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">ls</span></span><br>gpAdminLogs  gpinitsystem_singlenode  greenplum  hostlist_singlenode  Python-3.7.9  Python-3.7.9.tgz<br></code></pre></td></tr></table></figure><p>进入解压后的python文件夹，安装python依赖库，并编译安装python</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">cd</span> Python-3.7.9</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">安装依赖库（非常重要，不然有可能报各种奇奇怪怪的错！）</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">sudo apt-get install libbz2-dev libffi-dev libncurses5-dev libgdbm-dev liblzma-dev sqlite3 libsqlite3-dev openssl libssl-dev tcl8.6-dev tk8.6-dev libreadline-dev zlib1g-dev uuid-dev</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">有些时候安装完python后运行某些代码可能会出现<span class="hljs-keyword">for</span> ifunc symbol `clock_gettime<span class="hljs-string">&#x27; segmentation fault这样的问题，我个人是这样解决的(参照这个帖子：https://stackoverflow.com/questions/58077672/python3-relink-issue-while-importing-opencv)：</span></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash"><span class="hljs-string">$ sudo apt install python3-opencv</span></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash"><span class="hljs-string">编译，注意可以在--prefix后指定目录，也可以不指定</span></span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-string">./configure --prefix=/usr/local/src/python37</span></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash"><span class="hljs-string">安装</span></span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-string">sudo make &amp;&amp; sudo make install</span></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash"><span class="hljs-string">链接，注意这里面的/usr/local/src/python37需要换成编译阶段--prefix后面指定的目录</span></span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-string">sudo ln -s /usr/local/src/python37/bin/python3.7 /usr/bin/python3.7</span></span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-string">sudo ln -s /usr/local/src/python37/bin/pip3.7 /usr/bin/pip3.7</span></span><br></code></pre></td></tr></table></figure><p>然后需要重新source以下，并重设PYTHONHOME和PYTHONPATH，因为被greenplum改过</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">source</span> /opt/greenplum-db-6.24.3/greenplum_path.sh</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">unset</span> PYTHONHOME</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">unset</span> PYTHONPATH</span><br></code></pre></td></tr></table></figure><p>终于弄好了，至少我是这样的，很麻烦，如果有别的问题建议google一下</p>]]></content>
    
    
    <categories>
      
      <category>ubuntu</category>
      
    </categories>
    
    
    <tags>
      
      <tag>greenplum</tag>
      
      <tag>postgresql</tag>
      
      <tag>python37</tag>
      
      <tag>ubuntu</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python Interview-2. List and Dict</title>
    <link href="/2023/02/26/Python-Interview-2.-List-and-Dict/"/>
    <url>/2023/02/26/Python-Interview-2.-List-and-Dict/</url>
    
    <content type="html"><![CDATA[<h1>[Python Interview]List and Dict</h1><h2 id="List">List</h2><h3 id="Storage">Storage</h3><p>The elements of a list are stored respectively and separately in the memory. However, their addresses are stored together as a sequence list. It’s kind of like a pointer array in C or C++.</p><p>When user</p>]]></content>
    
    
    <categories>
      
      <category>python</category>
      
      <category>basics</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
      <tag>variable</tag>
      
      <tag>copy</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python Interview-1. Variables and Copy</title>
    <link href="/2023/02/26/%5BPython%20Interview%5D1.%20Variables%20and%20Copy/"/>
    <url>/2023/02/26/%5BPython%20Interview%5D1.%20Variables%20and%20Copy/</url>
    
    <content type="html"><![CDATA[<h1>[Python Interview]1. Variables and Copy</h1><h2 id="Variable-Types">Variable Types</h2><h3 id="immutable-variable">immutable variable</h3><p>immutable variables include :</p><ul><li>int</li><li>string</li><li>tuple</li></ul><p>When a function is called, the immutable variable parameters are passed by value.</p><p>For immutable variables, shallow copy and deep copy both will not allocate new memory space for the new variable. The two kinds of copies only build a reference relationship between the old object and the new object.</p><h3 id="mutable-variable">mutable variable</h3><p>immutable variables include:</p><ul><li>set</li><li>list</li><li>dict</li></ul><p>When a function is called, the mutable variable parameters are passed by reference.</p><p>For mutable variables, shallow copy and deep copy both will allocate new memory space for the new variable. However, for the immutable variables contained in mutable variables like lists, they are still shallow copied. So the deep copy of mutable variables just copy themselves, excluding the immutable variables contained.</p><h2 id="two-kinds-of-‘copy’">two kinds of ‘copy’</h2><p>Shallow copy is quite unanimous for all kinds of variables. However, deep copy for complex variables that have multi layers is worth discussing.</p><p>Actually, the principle can be concluded as:</p><ul><li>For each layer, follow the following rules recursively:</li><li>If the current layer is immutable, and all sub-elements are immutable, then no new space and object will be allocated for this layer.</li><li>If the current layer is immutable, and some of the sub-elements are mutable, then deep-copy these sub-elements and the current layer.</li><li>If the current layer is mutable, create a new object for the current layer, and copy the sub-elements depending on their mutability recursively.</li></ul><p>That’s based on my comprehension, some might be wrong.</p><h2 id="References">References</h2><p><a href="https://zhuanlan.zhihu.com/p/487677774">https://zhuanlan.zhihu.com/p/487677774</a></p><p><a href="https://mp.weixin.qq.com/s?__biz=MzU0NjgzMDIxMQ==&amp;mid=2247569389&amp;idx=4&amp;sn=7f93a257c597821bb55da3e2637a3f3d&amp;chksm=fb542d01cc23a4178b83617a01e933494ca6274dd2086baf2bd0354ac30637cc9af674458116&amp;scene=27">https://mp.weixin.qq.com/s?__biz=MzU0NjgzMDIxMQ==&amp;mid=2247569389&amp;idx=4&amp;sn=7f93a257c597821bb55da3e2637a3f3d&amp;chksm=fb542d01cc23a4178b83617a01e933494ca6274dd2086baf2bd0354ac30637cc9af674458116&amp;scene=27</a></p><p><a href="https://blog.csdn.net/m0_59044674/article/details/127267173">https://blog.csdn.net/m0_59044674/article/details/127267173</a></p><p><a href="https://towardsdatascience.com/an-overview-of-mutability-in-python-objects-8efce55fd08f">https://towardsdatascience.com/an-overview-of-mutability-in-python-objects-8efce55fd08f</a></p>]]></content>
    
    
    <categories>
      
      <category>python</category>
      
      <category>basics</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
      <tag>variable</tag>
      
      <tag>copy</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>AdaDelta and Adam Algorithm</title>
    <link href="/2023/02/19/AdaDelta-and-Adam-Algorithm/"/>
    <url>/2023/02/19/AdaDelta-and-Adam-Algorithm/</url>
    
    <content type="html"><![CDATA[<h1>AdaDelta and Adam Algorithm</h1><h2 id="AdaDelta">AdaDelta</h2><p>AdaDelta is another variant of AdaGrad. Like RMSProp, it solves the problem of relying too much on previous gradients, by leaky average,  but in a more complicated way. Here is how it works.</p><p>First, like RMSProp, we have:</p><p class="katex-block "><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msub><mi>S</mi><mi>t</mi></msub><mo>=</mo><mi>ρ</mi><msub><mi>S</mi><mrow><mi>t</mi><mo>−</mo><mn>1</mn></mrow></msub><mo>+</mo><mo stretchy="false">(</mo><mn>1</mn><mo>−</mo><mi>ρ</mi><mo stretchy="false">)</mo><msubsup><mi>g</mi><mi>t</mi><mn>2</mn></msubsup></mrow><annotation encoding="application/x-tex">S_t=\rho S_{t-1} + (1-\rho)g_t^2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2806em;"><span style="top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">t</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8917em;vertical-align:-0.2083em;"></span><span class="mord mathnormal">ρ</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">t</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2083em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1.1141em;vertical-align:-0.25em;"></span><span class="mord mathnormal">ρ</span><span class="mclose">)</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8641em;"><span style="top:-2.453em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">t</span></span></span><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.247em;"><span></span></span></span></span></span></span></span></span></span></span></p><p>but unlike RMSProp, we don’t upgrade W directly with S. We have a iterative equation:</p><p class="katex-block "><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mo fence="true">{</mo><mtable rowspacing="0.36em" columnalign="left left" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><msub><mi>M</mi><mi>t</mi></msub><mo>=</mo><mi>ρ</mi><msub><mi>M</mi><mrow><mi>t</mi><mo>−</mo><mn>1</mn></mrow></msub><mo>+</mo><mo stretchy="false">(</mo><mn>1</mn><mo>−</mo><mi>ρ</mi><mo stretchy="false">)</mo><msubsup><mi>G</mi><mrow><mi>t</mi><mo>−</mo><mn>1</mn></mrow><mn>2</mn></msubsup></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><msub><mi>G</mi><mi>t</mi></msub><mo>=</mo><mfrac><msqrt><mrow><msub><mi>M</mi><mrow><mi>t</mi><mo>−</mo><mn>1</mn></mrow></msub><mo>+</mo><mi>ϵ</mi></mrow></msqrt><msqrt><mrow><msub><mi>S</mi><mi>t</mi></msub><mo>+</mo><mi>ϵ</mi></mrow></msqrt></mfrac><mo>⋅</mo><msub><mi>g</mi><mi>t</mi></msub></mrow></mstyle></mtd></mtr></mtable></mrow><annotation encoding="application/x-tex">\begin{cases}M_t = \rho M_{t-1}+(1-\rho)G_{t-1}^2\\G_t = \frac{\sqrt{M_{t-1}+\epsilon}}{\sqrt{S_t+\epsilon}}\cdot g_t\end{cases}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:3.016em;vertical-align:-1.258em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size4">{</span></span><span class="mord"><span class="mtable"><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.758em;"><span style="top:-3.788em;"><span class="pstrut" style="height:3.038em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2806em;"><span style="top:-2.55em;margin-left:-0.109em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">t</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord mathnormal">ρ</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.109em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">t</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2083em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathnormal">ρ</span><span class="mclose">)</span><span class="mord"><span class="mord mathnormal">G</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-2.4519em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">t</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.3064em;"><span></span></span></span></span></span></span></span></span><span style="top:-2.318em;"><span class="pstrut" style="height:3.038em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">G</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2806em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">t</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.038em;"><span style="top:-2.5874em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord sqrt mtight"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8608em;"><span class="svg-align" style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mtight" style="padding-left:0.833em;"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2963em;"><span style="top:-2.357em;margin-left:-0.0576em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathnormal mtight">t</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span><span class="mbin mtight">+</span><span class="mord mathnormal mtight">ϵ</span></span></span><span style="top:-2.8208em;"><span class="pstrut" style="height:3em;"></span><span class="hide-tail mtight" style="min-width:0.853em;height:1.08em;"><svg xmlns="http://www.w3.org/2000/svg" width="400em" height="1.08em" viewbox="0 0 400000 1080" preserveaspectratio="xMinYMin slice"><path d="M95,702c-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14c0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54c44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10s173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429c69,-144,104.5,-217.7,106.5,-221l0 -0c5.3,-9.3,12,-14,20,-14H400000v40H845.2724s-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7c-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47zM834 80h400000v40h-400000z"/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.1792em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.4563em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord sqrt mtight"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.831em;"><span class="svg-align" style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mtight" style="padding-left:0.833em;"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.10903em;">M</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3173em;"><span style="top:-2.357em;margin-left:-0.109em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">t</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2025em;"><span></span></span></span></span></span></span><span class="mbin mtight">+</span><span class="mord mathnormal mtight">ϵ</span></span></span><span style="top:-2.791em;"><span class="pstrut" style="height:3em;"></span><span class="hide-tail mtight" style="min-width:0.853em;height:1.08em;"><svg xmlns="http://www.w3.org/2000/svg" width="400em" height="1.08em" viewbox="0 0 400000 1080" preserveaspectratio="xMinYMin slice"><path d="M95,702c-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14c0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54c44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10s173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429c69,-144,104.5,-217.7,106.5,-221l0 -0c5.3,-9.3,12,-14,20,-14H400000v40H845.2724s-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7c-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47zM834 80h400000v40h-400000z"/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.209em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.538em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2806em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">t</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.258em;"><span></span></span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p><p>If we combine them into one equation, we have:</p><p class="katex-block "><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msub><mi>G</mi><mi>t</mi></msub><mo>=</mo><mfrac><msqrt><mrow><mi>ρ</mi><msub><mi>M</mi><mrow><mi>t</mi><mo>−</mo><mn>2</mn></mrow></msub><mo>+</mo><mo stretchy="false">(</mo><mn>1</mn><mo>−</mo><mi>ρ</mi><mo stretchy="false">)</mo><msubsup><mi>G</mi><mrow><mi>t</mi><mo>−</mo><mn>1</mn></mrow><mn>2</mn></msubsup><mo>+</mo><mi>ϵ</mi></mrow></msqrt><msqrt><mrow><msub><mi>S</mi><mi>t</mi></msub><mo>+</mo><mi>ϵ</mi></mrow></msqrt></mfrac><mo>⋅</mo><mi mathvariant="normal">∇</mi><msub><mi>W</mi><mi>t</mi></msub></mrow><annotation encoding="application/x-tex">G_t=\frac{\sqrt{\rho M_{t-2}+(1-\rho)G_{t-1}^2+\epsilon}}{\sqrt{S_t+\epsilon}}\cdot\nabla W_t</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">G</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2806em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">t</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:3.16em;vertical-align:-0.93em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.23em;"><span style="top:-2.479em;"><span class="pstrut" style="height:3.2206em;"></span><span class="mord"><span class="mord sqrt"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8517em;"><span class="svg-align" style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord" style="padding-left:0.833em;"><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2806em;"><span style="top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">t</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathnormal">ϵ</span></span></span><span style="top:-2.8117em;"><span class="pstrut" style="height:3em;"></span><span class="hide-tail" style="min-width:0.853em;height:1.08em;"><svg xmlns="http://www.w3.org/2000/svg" width="400em" height="1.08em" viewbox="0 0 400000 1080" preserveaspectratio="xMinYMin slice"><path d="M95,702c-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14c0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54c44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10s173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429c69,-144,104.5,-217.7,106.5,-221l0 -0c5.3,-9.3,12,-14,20,-14H400000v40H845.2724s-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7c-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47zM834 80h400000v40h-400000z"/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.1883em;"><span></span></span></span></span></span></span></span><span style="top:-3.4506em;"><span class="pstrut" style="height:3.2206em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-4.23em;"><span class="pstrut" style="height:3.2206em;"></span><span class="mord"><span class="mord sqrt"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.2206em;"><span class="svg-align" style="top:-3.8em;"><span class="pstrut" style="height:3.8em;"></span><span class="mord" style="padding-left:1em;"><span class="mord mathnormal">ρ</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.109em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">t</span><span class="mbin mtight">−</span><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2083em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathnormal">ρ</span><span class="mclose">)</span><span class="mord"><span class="mord mathnormal">G</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.7959em;"><span style="top:-2.4337em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">t</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.0448em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.3246em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathnormal">ϵ</span></span></span><span style="top:-3.1806em;"><span class="pstrut" style="height:3.8em;"></span><span class="hide-tail" style="min-width:1.02em;height:1.88em;"><svg xmlns="http://www.w3.org/2000/svg" width="400em" height="1.88em" viewbox="0 0 400000 1944" preserveaspectratio="xMinYMin slice"><path d="M983 90l0 -0c4,-6.7,10,-10,18,-10 H400000v40H1013.1s-83.4,268,-264.1,840c-180.7,572,-277,876.3,-289,913c-4.7,4.7,-12.7,7,-24,7s-12,0,-12,0c-1.3,-3.3,-3.7,-11.7,-7,-25c-35.3,-125.3,-106.7,-373.3,-214,-744c-10,12,-21,25,-33,39s-32,39,-32,39c-6,-5.3,-15,-14,-27,-26s25,-30,25,-30c26.7,-32.7,52,-63,76,-91s52,-60,52,-60s208,722,208,722c56,-175.3,126.3,-397.3,211,-666c84.7,-268.7,153.8,-488.2,207.5,-658.5c53.7,-170.3,84.5,-266.8,92.5,-289.5zM1001 80h400000v40h-400000z"/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.6194em;"><span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.93em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord">∇</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">W</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2806em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">t</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></span></p><p>And we update W with G:</p><p class="katex-block "><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msub><mi>W</mi><mi>t</mi></msub><mo>=</mo><msub><mi>W</mi><mrow><mi>t</mi><mo>−</mo><mn>1</mn></mrow></msub><mo>−</mo><msub><mi>G</mi><mi>t</mi></msub></mrow><annotation encoding="application/x-tex">W_t = W_{t-1} - G_t</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">W</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2806em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">t</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8917em;vertical-align:-0.2083em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">W</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">t</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2083em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">G</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2806em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">t</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></span></p><p>The iterative equation part could be quite confusing. The sequence of calculation and update should be:</p><ol><li>gradient(<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>g</mi><mi>t</mi></msub><mo>=</mo><mi mathvariant="normal">∇</mi><msub><mi>W</mi><mi>t</mi></msub></mrow><annotation encoding="application/x-tex">g_t=\nabla W_t</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2806em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">t</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord">∇</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">W</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2806em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">t</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>)</li><li><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>S</mi><mi>t</mi></msub></mrow><annotation encoding="application/x-tex">S_t</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2806em;"><span style="top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">t</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></li><li><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>G</mi><mi>t</mi></msub></mrow><annotation encoding="application/x-tex">G_t</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">G</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2806em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">t</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></li><li><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>M</mi><mi>t</mi></msub></mrow><annotation encoding="application/x-tex">M_t</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2806em;"><span style="top:-2.55em;margin-left:-0.109em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">t</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></li><li><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>W</mi><mi>t</mi></msub></mrow><annotation encoding="application/x-tex">W_t</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">W</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2806em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">t</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></li></ol><p>In AdaDelta, we have no learning rate <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>η</mi></mrow><annotation encoding="application/x-tex">\eta</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">η</span></span></span></span>, that means we don’t need to set a hyper-parameter by ourselves.</p><h2 id="Adam">Adam</h2><p>We use a algorithm to combine RMSProp and momentum method.</p><p class="katex-block "><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msub><mi>m</mi><mi>t</mi></msub><mo>=</mo><msub><mi>β</mi><mn>1</mn></msub><msub><mi>m</mi><mrow><mi>t</mi><mo>−</mo><mn>1</mn></mrow></msub><mo>+</mo><mo stretchy="false">(</mo><mn>1</mn><mo>−</mo><msub><mi>β</mi><mn>1</mn></msub><mo stretchy="false">)</mo><msub><mi>g</mi><mi>t</mi></msub></mrow><annotation encoding="application/x-tex">m_t = \beta_1 m_{t-1} + (1-\beta_1)g_t</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5806em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">m</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2806em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">t</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.9028em;vertical-align:-0.2083em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05278em;">β</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0528em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">m</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">t</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2083em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05278em;">β</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0528em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2806em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">t</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></span></p><p class="katex-block "><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msub><mi>v</mi><mi>t</mi></msub><mo>=</mo><msub><mi>β</mi><mn>2</mn></msub><msub><mi>v</mi><mrow><mi>t</mi><mo>−</mo><mn>1</mn></mrow></msub><mo>+</mo><mo stretchy="false">(</mo><mn>1</mn><mo>−</mo><msub><mi>β</mi><mn>2</mn></msub><mo stretchy="false">)</mo><msubsup><mi>g</mi><mi>t</mi><mn>2</mn></msubsup></mrow><annotation encoding="application/x-tex">v_t = \beta_2 v_{t-1}+(1-\beta_2)g_t^2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5806em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2806em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">t</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.9028em;vertical-align:-0.2083em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05278em;">β</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0528em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">t</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2083em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1.1141em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05278em;">β</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0528em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8641em;"><span style="top:-2.453em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">t</span></span></span><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.247em;"><span></span></span></span></span></span></span></span></span></span></span></p><p>It is suggested that we set <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>β</mi><mn>1</mn></msub></mrow><annotation encoding="application/x-tex">\beta_1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05278em;">β</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0528em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> to 0.9 and <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>β</mi><mn>2</mn></msub></mrow><annotation encoding="application/x-tex">\beta_2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05278em;">β</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0528em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> to 0.999. To correct the discrepancy between the expectation of v and <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msubsup><mi>g</mi><mi>t</mi><mn>2</mn></msubsup></mrow><annotation encoding="application/x-tex">g_t^2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0611em;vertical-align:-0.247em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-2.453em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">t</span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.247em;"><span></span></span></span></span></span></span></span></span></span>, we need to correct the v:</p><p class="katex-block "><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mover accent="true"><msub><mi>v</mi><mi>t</mi></msub><mo>^</mo></mover><mo>=</mo><mfrac><msub><mi>v</mi><mi>t</mi></msub><mrow><mn>1</mn><mo>−</mo><msubsup><mi>β</mi><mn>2</mn><mi>t</mi></msubsup></mrow></mfrac></mrow><annotation encoding="application/x-tex">\hat{v_t}=\frac{v_t}{1-\beta_2^t}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8444em;vertical-align:-0.15em;"></span><span class="mord accent"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.6944em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2806em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">t</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.25em;"><span class="mord">^</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.0599em;vertical-align:-0.9523em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.1076em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05278em;">β</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.7754em;"><span style="top:-2.4337em;margin-left:-0.0528em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span><span style="top:-3.0448em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">t</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2663em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2806em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">t</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9523em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p><p>Likewise, we could also correct m by:</p><p class="katex-block "><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mover accent="true"><msub><mi>m</mi><mi>t</mi></msub><mo>^</mo></mover><mo>=</mo><mfrac><msub><mi>m</mi><mi>t</mi></msub><mrow><mn>1</mn><mo>−</mo><msubsup><mi>β</mi><mn>1</mn><mi>t</mi></msubsup></mrow></mfrac></mrow><annotation encoding="application/x-tex">\hat{m_t}=\frac{m_t}{1-\beta_1^t}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8444em;vertical-align:-0.15em;"></span><span class="mord accent"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.6944em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">m</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2806em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">t</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.25em;"><span class="mord">^</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.0599em;vertical-align:-0.9523em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.1076em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05278em;">β</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.7754em;"><span style="top:-2.4337em;margin-left:-0.0528em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span><span style="top:-3.0448em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">t</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2663em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">m</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2806em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">t</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9523em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p><p>And now we could update W by:</p><p class="katex-block "><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msub><mi>W</mi><mi>t</mi></msub><mo>=</mo><msub><mi>W</mi><mrow><mi>t</mi><mo>−</mo><mn>1</mn></mrow></msub><mo>−</mo><mi>η</mi><mfrac><mover accent="true"><msub><mi>m</mi><mi>t</mi></msub><mo>^</mo></mover><mrow><msqrt><mover accent="true"><msub><mi>v</mi><mi>t</mi></msub><mo>^</mo></mover></msqrt><mo>+</mo><mi>ϵ</mi></mrow></mfrac></mrow><annotation encoding="application/x-tex">W_t=W_{t-1}-\eta\frac{\hat{m_t}}{\sqrt{\hat{v_t}}+\epsilon}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">W</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2806em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">t</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8917em;vertical-align:-0.2083em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">W</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">t</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2083em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:2.3014em;vertical-align:-0.93em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">η</span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3714em;"><span style="top:-2.2528em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord sqrt"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8572em;"><span class="svg-align" style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord" style="padding-left:0.833em;"><span class="mord accent"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.6944em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2806em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">t</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.25em;"><span class="mord">^</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span><span style="top:-2.8172em;"><span class="pstrut" style="height:3em;"></span><span class="hide-tail" style="min-width:0.853em;height:1.08em;"><svg xmlns="http://www.w3.org/2000/svg" width="400em" height="1.08em" viewbox="0 0 400000 1080" preserveaspectratio="xMinYMin slice"><path d="M95,702c-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14c0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54c44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10s173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429c69,-144,104.5,-217.7,106.5,-221l0 -0c5.3,-9.3,12,-14,20,-14H400000v40H845.2724s-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7c-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47zM834 80h400000v40h-400000z"/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.1828em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathnormal">ϵ</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord accent"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.6944em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">m</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2806em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">t</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.25em;"><span class="mord">^</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.93em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p><p>About the correction of discrepancy part, the author gives a inference in the original paper:<a href="https://arxiv.org/pdf/1412.6980v9.pdf">https://arxiv.org/pdf/1412.6980v9.pdf</a>?</p><h3 id="Yogi">Yogi</h3><p>We can rewrite the formula in Adam to:</p><p class="katex-block "><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msub><mi>v</mi><mi>t</mi></msub><mo>=</mo><msub><mi>v</mi><mrow><mi>t</mi><mo>−</mo><mn>1</mn></mrow></msub><mo>+</mo><mo stretchy="false">(</mo><mn>1</mn><mo>−</mo><msub><mi>β</mi><mn>2</mn></msub><mo stretchy="false">)</mo><mo stretchy="false">(</mo><msubsup><mi>g</mi><mi>t</mi><mn>2</mn></msubsup><mo>−</mo><msub><mi>v</mi><mrow><mi>t</mi><mo>−</mo><mn>1</mn></mrow></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">v_t=v_{t-1}+(1-\beta_2)(g_t^2-v_{t-1})</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5806em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2806em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">t</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.7917em;vertical-align:-0.2083em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">t</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2083em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1.1141em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05278em;">β</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0528em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8641em;"><span style="top:-2.453em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">t</span></span></span><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.247em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">t</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2083em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></span></p><p>If the gradient is too big, Adam algorithm may fail to converge. To fix this problem, we have Yogi algorithm:</p><p class="katex-block "><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msub><mi>v</mi><mi>t</mi></msub><mo>=</mo><msub><mi>v</mi><mrow><mi>t</mi><mo>−</mo><mn>1</mn></mrow></msub><mo>+</mo><mo stretchy="false">(</mo><mn>1</mn><mo>−</mo><msub><mi>β</mi><mn>2</mn></msub><mo stretchy="false">)</mo><msubsup><mi>g</mi><mi>t</mi><mn>2</mn></msubsup><mo>⋅</mo><mi>s</mi><mi>g</mi><mi>n</mi><mo stretchy="false">(</mo><msubsup><mi>g</mi><mi>t</mi><mn>2</mn></msubsup><mo>−</mo><msub><mi>v</mi><mrow><mi>t</mi><mo>−</mo><mn>1</mn></mrow></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">v_t=v_{t-1}+(1-\beta_2)g_t^2\cdot sgn(g_t^2-v_{t-1})</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5806em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2806em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">t</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.7917em;vertical-align:-0.2083em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">t</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2083em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1.1141em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05278em;">β</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0528em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8641em;"><span style="top:-2.453em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">t</span></span></span><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.247em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1.1141em;vertical-align:-0.25em;"></span><span class="mord mathnormal">s</span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mord mathnormal">n</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8641em;"><span style="top:-2.453em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">t</span></span></span><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.247em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">t</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2083em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></span></p><h2 id="References">References</h2><p><a href="https://arxiv.org/pdf/1412.6980v9.pdf">https://arxiv.org/pdf/1412.6980v9.pdf</a>?</p><p><a href="https://zh-v2.d2l.ai/d2l-zh-pytorch.pdf">https://zh-v2.d2l.ai/d2l-zh-pytorch.pdf</a></p><p><a href="https://blog.csdn.net/weixin_35344136/article/details/113041592">https://blog.csdn.net/weixin_35344136/article/details/113041592</a></p><p><a href="https://blog.csdn.net/ustbbsy/article/details/106930309">https://blog.csdn.net/ustbbsy/article/details/106930309</a></p>]]></content>
    
    
    <categories>
      
      <category>machine learning</category>
      
      <category>Dive into Deep Learning-Notes</category>
      
      <category>optimization</category>
      
    </categories>
    
    
    <tags>
      
      <tag>machine learning</tag>
      
      <tag>optimization</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>AdaGrad and RMSProp Algorithm</title>
    <link href="/2023/02/18/AdaGrad-and-RMSProp-Algorithm/"/>
    <url>/2023/02/18/AdaGrad-and-RMSProp-Algorithm/</url>
    
    <content type="html"><![CDATA[<h1>AdaGrad and RMSProp Algorithm</h1><h3 id="AdaGrad">AdaGrad</h3><p>Standard gradient descend is too scaled to be applied to modern deep neural network. AdaGrad is a effective method to optimize  by adjusting learning rate dynamically and automatically.</p><p>At each step,</p><p class="katex-block "><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msub><mi>S</mi><mi>t</mi></msub><mo>=</mo><msub><mi>S</mi><mrow><mi>t</mi><mo>−</mo><mn>1</mn></mrow></msub><mo>+</mo><mi mathvariant="normal">∇</mi><msub><mi>W</mi><mi>t</mi></msub><mo>⋅</mo><mi mathvariant="normal">∇</mi><msub><mi>W</mi><mi>t</mi></msub></mrow><annotation encoding="application/x-tex">S_t=S_{t-1}+\nabla W_t\cdot \nabla W_t</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2806em;"><span style="top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">t</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8917em;vertical-align:-0.2083em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">t</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2083em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord">∇</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">W</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2806em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">t</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord">∇</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">W</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2806em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">t</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></span></p><p class="katex-block "><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msub><mi>W</mi><mi>t</mi></msub><mo>=</mo><msub><mi>W</mi><mrow><mi>t</mi><mo>−</mo><mn>1</mn></mrow></msub><mo>−</mo><mfrac><mi>η</mi><msqrt><mrow><msub><mi>S</mi><mi>t</mi></msub><mo>+</mo><mi>ϵ</mi></mrow></msqrt></mfrac><mi mathvariant="normal">∇</mi><msub><mi>W</mi><mi>t</mi></msub></mrow><annotation encoding="application/x-tex">W_t =W_{t-1}-\frac{\eta}{\sqrt{S_t+\epsilon}}\nabla W_t</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">W</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2806em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">t</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8917em;vertical-align:-0.2083em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">W</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">t</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2083em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:2.0376em;vertical-align:-0.93em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.1076em;"><span style="top:-2.2583em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord sqrt"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8517em;"><span class="svg-align" style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord" style="padding-left:0.833em;"><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2806em;"><span style="top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">t</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathnormal">ϵ</span></span></span><span style="top:-2.8117em;"><span class="pstrut" style="height:3em;"></span><span class="hide-tail" style="min-width:0.853em;height:1.08em;"><svg xmlns="http://www.w3.org/2000/svg" width="400em" height="1.08em" viewbox="0 0 400000 1080" preserveaspectratio="xMinYMin slice"><path d="M95,702c-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14c0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54c44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10s173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429c69,-144,104.5,-217.7,106.5,-221l0 -0c5.3,-9.3,12,-14,20,-14H400000v40H845.2724s-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7c-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47zM834 80h400000v40h-400000z"/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.1883em;"><span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">η</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.93em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mord">∇</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">W</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2806em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">t</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></span></p><p>The more the weight vector has changed in a dimension,  the more gradient it has accumulated on that dimension.</p><p>In AdaGrad, we use $ S_t $ to count the gradient of W in the past, and update W with S. The bigger $ S_i $ is, the smaller the change on $ W_i $ would be. By doing this, we could adjust learning rate on each dimension respectively, according to the frequency and range of changes on each dimension of the weight vector. If your path has gone through a steep slope in the direction of X-axis, you need to slow down in X-axis in case you miss the terminal. But your path is quite flat in Y-axis, so you don’t need to slow down too much on that direction.</p><h3 id="RMSProp">RMSProp</h3><p>The problem of AdaGrad is that it counts on gradients in the past too much, so that it might not respond timely on the sudden change of gradient. That is because S has accumulated too much previous gradient. We want to reduce the impact of the gradient too far away in the past, so here we have RMSProp Algorithm:</p><p class="katex-block "><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msub><mi>S</mi><mi>t</mi></msub><mo>=</mo><mi>γ</mi><msub><mi>S</mi><mrow><mi>t</mi><mo>−</mo><mn>1</mn></mrow></msub><mo>+</mo><mo stretchy="false">(</mo><mn>1</mn><mo>−</mo><mi>γ</mi><mo stretchy="false">)</mo><mi mathvariant="normal">∇</mi><msub><mi>W</mi><mi>t</mi></msub><mo>⋅</mo><mi mathvariant="normal">∇</mi><msub><mi>W</mi><mi>t</mi></msub></mrow><annotation encoding="application/x-tex">S_t=\gamma S_{t-1}+(1-\gamma)\nabla W_t\cdot \nabla W_t</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2806em;"><span style="top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">t</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8917em;vertical-align:-0.2083em;"></span><span class="mord mathnormal" style="margin-right:0.05556em;">γ</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">t</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2083em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.05556em;">γ</span><span class="mclose">)</span><span class="mord">∇</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">W</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2806em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">t</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord">∇</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">W</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2806em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">t</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></span></p><p class="katex-block "><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msub><mi>W</mi><mi>t</mi></msub><mo>=</mo><msub><mi>W</mi><mrow><mi>t</mi><mo>−</mo><mn>1</mn></mrow></msub><mo>−</mo><mfrac><mi>η</mi><msqrt><mrow><msub><mi>S</mi><mi>t</mi></msub><mo>+</mo><mi>ϵ</mi></mrow></msqrt></mfrac><mi mathvariant="normal">∇</mi><msub><mi>W</mi><mi>t</mi></msub></mrow><annotation encoding="application/x-tex">W_t =W_{t-1}-\frac{\eta}{\sqrt{S_t+\epsilon}}\nabla W_t</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">W</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2806em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">t</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8917em;vertical-align:-0.2083em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">W</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">t</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2083em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:2.0376em;vertical-align:-0.93em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.1076em;"><span style="top:-2.2583em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord sqrt"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8517em;"><span class="svg-align" style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord" style="padding-left:0.833em;"><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2806em;"><span style="top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">t</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathnormal">ϵ</span></span></span><span style="top:-2.8117em;"><span class="pstrut" style="height:3em;"></span><span class="hide-tail" style="min-width:0.853em;height:1.08em;"><svg xmlns="http://www.w3.org/2000/svg" width="400em" height="1.08em" viewbox="0 0 400000 1080" preserveaspectratio="xMinYMin slice"><path d="M95,702c-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14c0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54c44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10s173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429c69,-144,104.5,-217.7,106.5,-221l0 -0c5.3,-9.3,12,-14,20,-14H400000v40H845.2724s-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7c-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47zM834 80h400000v40h-400000z"/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.1883em;"><span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">η</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.93em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mord">∇</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">W</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2806em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">t</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></span></p><p>The only change is the weight $ \gamma $ of $ S_{t-1} $. This makes the portion of previous gradients in current S decay in a growing rate.</p><h3 id="References">References</h3><p><a href="https://zh-v2.d2l.ai/d2l-zh-pytorch.pdf">https://zh-v2.d2l.ai/d2l-zh-pytorch.pdf</a></p><p><a href="https://zhuanlan.zhihu.com/p/72039430">https://zhuanlan.zhihu.com/p/72039430</a></p><p><a href="https://blog.csdn.net/rpsate/article/details/127320124">https://blog.csdn.net/rpsate/article/details/127320124</a></p><p><a href="https://www.bilibili.com/video/BV1r64y1s7fU?spm_id_from=333.880.my_history.page.click">https://www.bilibili.com/video/BV1r64y1s7fU?spm_id_from=333.880.my_history.page.click</a></p>]]></content>
    
    
    <categories>
      
      <category>machine learning</category>
      
      <category>Dive into Deep Learning-Notes</category>
      
    </categories>
    
    
    <tags>
      
      <tag>machine learning</tag>
      
      <tag>optimization</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2023/02/05/CNN%20Convolution/"/>
    <url>/2023/02/05/CNN%20Convolution/</url>
    
    <content type="html"><![CDATA[<hr><hr><h1>CNN: Convolution?</h1><p>Now I am at chapter <em>convolutional neural network</em>. There is a formula with many subscripts:</p><p><img src="/.com//D:%5Cdingblog%5Csource%5Cimg%5Cconvolution%5Cformula.png" alt></p><p>What does it mean?</p><p>Well, let’s put it in a graph.</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Covariate Shift, Label Shift and Concept Shift</title>
    <link href="/2023/01/30/%5BDive%20into%20Deep%20Learning%5D%20Covariate%20Shift,%20Label%20Shift%20and%20Concept%20Shift/"/>
    <url>/2023/01/30/%5BDive%20into%20Deep%20Learning%5D%20Covariate%20Shift,%20Label%20Shift%20and%20Concept%20Shift/</url>
    
    <content type="html"><![CDATA[<h1>[Dive into Deep Learning] Covariate Shift, Label Shift and Concept Shift</h1><p>When studying distribution shift, these concepts kept confusing me for a long time. After searching they finally become clearer.</p><h2 id="Covariate-Shift">Covariate Shift</h2><p>First, what exactly is a <strong>covariate</strong> in machine learning? Well, after searching I found that covariates in statistics corresponds with features in machine learning, which means that covariate shift is actually the shift of features. In many cases, the features of test datasets might differ from those of the training data sets, yet the labels remain the same. For example, one model is trained with a set of real dog pictures, but it might be required to distinguish a comic dog like Snoopy. The model has never seen Snoopy-like cartoon dogs before, and such dogs have different distribution of features and labels with real dogs, but they share the same label: dog. Such a shift of distribution is called <strong>covariate shift</strong>.</p><h2 id="Label-Shift">Label Shift</h2><p>Label shift is exactly the opposite of covariate shift. Here is what I found at <strong><a href="https://towardsdatascience.com">https://towardsdatascience.com</a></strong>, written(or quoted) by Dr. Matthew Stewart:</p><blockquote><p>Prior probability shift appears only in Y-&gt;X problems, and is defined as the case where P~tra~(x|y) = P~tst~(x|y) and P~tra~(y) ≠ P~tst~(y).</p></blockquote><p>So therefore the example of diseases and symptoms makes sense. We want to predict disease by symptoms, so ‘symptoms’ is X, and ‘diseases’ is Y. Apparently diseases cause symptoms, so this is a typical Y-&gt;X case. The distribution of diseases is not always the same, since diseases occur at different rates in different seasons, so the distribution of Y changes. This is a label shift.</p><h2 id="Concept-Shift">Concept Shift</h2><p>Concept shift is different, it is the mere change of P(y|x). Let’s assume there was once a type of medicine, but it was later redefined as a type of beverage by FDA, though its ingredients remains the same. So a model developed at the earlier period trying to classify medicine and beverage by the ingredients may not work well later.</p><p>That is my preliminary understanding of distribution shifts in this book. There’s still some ambiguity though, and I’ll keep working on that.</p>]]></content>
    
    
    <categories>
      
      <category>machine learning</category>
      
      <category>Dive into Deep Learning-Notes</category>
      
    </categories>
    
    
    <tags>
      
      <tag>machine learning</tag>
      
      <tag>distribution shift</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2022/09/28/hello-world/"/>
    <url>/2022/09/28/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start">Quick Start</h2><h3 id="Create-a-new-post">Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server">Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files">Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites">Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
